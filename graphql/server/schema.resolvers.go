package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"
	"os"

	"github.com/edgar-care/edgarlib/graphql/server/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, email string, password string) (*model.Patient, error) {
	var result model.Patient

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newPatient := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").InsertOne(ctx, newPatient)
	if err != nil {
		return nil, err
	}
	entity := model.Patient{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdatePatient is the resolver for the updatePatient field.
func (r *mutationResolver) UpdatePatient(ctx context.Context, id string, email *string, password *string, medicalInfoID *string, rendezVousIds []*string, documentIds []*string, treatmentFollowUpIds []*string, chatIds []*string) (*model.Patient, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":                     objId,
		"email":                   email,
		"password":                password,
		"rendez_vous_ids":         rendezVousIds,
		"medical_info_id":         medicalInfoID,
		"document_ids":            documentIds,
		"treatment_follow_up_ids": treatmentFollowUpIds,
		"chat_ids":                chatIds,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").ReplaceOne(ctx, filter, updated)
	return &model.Patient{
		ID:                   id,
		Email:                *email,
		Password:             *password,
		RendezVousIds:        rendezVousIds,
		MedicalInfoID:        medicalInfoID,
		DocumentIds:          documentIds,
		TreatmentFollowUpIds: treatmentFollowUpIds,
		ChatIds:              chatIds,
	}, err
}

// DeletePatient is the resolver for the deletePatient field.
func (r *mutationResolver) DeletePatient(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDoctor is the resolver for the createDoctor field.
func (r *mutationResolver) CreateDoctor(ctx context.Context, email string, password string, name string, firstname string, address model.AddressInput) (*model.Doctor, error) {
	var result model.Doctor

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newDoctor := bson.M{
		"email":     email,
		"password":  password,
		"name":      name,
		"firstname": firstname,
		"address":   address,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").InsertOne(ctx, newDoctor)
	if err != nil {
		return nil, err
	}

	listaddress := &model.Address{
		Street:  address.Street,
		ZipCode: address.ZipCode,
		Country: address.Country,
		City:    address.City,
	}

	entity := model.Doctor{
		Email:     email,
		Password:  password,
		Name:      name,
		Firstname: firstname,
		Address:   listaddress,
		ID:        res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateDoctor is the resolver for the updateDoctor field.
func (r *mutationResolver) UpdateDoctor(ctx context.Context, id string, email *string, password *string, name *string, firstname *string, rendezVousIds []*string, patientIds []*string, address *model.AddressInput, chatIds []*string) (*model.Doctor, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":             objId,
		"email":           email,
		"password":        password,
		"name":            name,
		"firstname":       firstname,
		"rendez_vous_ids": rendezVousIds,
		"patient_ids":     patientIds,
		"address":         address,
		"chat_ids":        chatIds,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").ReplaceOne(ctx, filter, updated)
	return &model.Doctor{
		ID:        id,
		Email:     *email,
		Password:  *password,
		Name:      *name,
		Firstname: *firstname,
		Address: &model.Address{
			Street:  address.Street,
			ZipCode: address.ZipCode,
			Country: address.Country,
			City:    address.City,
		},
		RendezVousIds: rendezVousIds,
		PatientIds:    patientIds,
		ChatIds:       chatIds,
	}, err
}

// DeleteDoctor is the resolver for the deleteDoctor field.
func (r *mutationResolver) DeleteDoctor(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAdmin is the resolver for the createAdmin field.
func (r *mutationResolver) CreateAdmin(ctx context.Context, email string, password string, name string, lastName string) (*model.Admin, error) {
	var result model.Admin

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newAdmin := bson.M{
		"email":     email,
		"password":  password,
		"name":      name,
		"last_name": lastName,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").InsertOne(ctx, newAdmin)
	if err != nil {
		return nil, err
	}
	entity := model.Admin{
		Email:    email,
		Password: password,
		Name:     name,
		LastName: lastName,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateAdmin is the resolver for the updateAdmin field.
func (r *mutationResolver) UpdateAdmin(ctx context.Context, id string, email *string, password *string, name *string, lastName *string) (*model.Admin, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":       objId,
		"email":     email,
		"password":  password,
		"name":      name,
		"last_name": lastName,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").ReplaceOne(ctx, filter, updated)
	return &model.Admin{
		ID:       id,
		Email:    *email,
		Password: *password,
		Name:     *name,
		LastName: *lastName,
	}, err
}

// DeleteAdmin is the resolver for the deleteAdmin field.
func (r *mutationResolver) DeleteAdmin(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDemoAccount is the resolver for the createDemoAccount field.
func (r *mutationResolver) CreateDemoAccount(ctx context.Context, email string, password string) (*model.DemoAccount, error) {
	var result model.DemoAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newDemoAccount := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").InsertOne(ctx, newDemoAccount)
	if err != nil {
		return nil, err
	}
	entity := model.DemoAccount{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateDemoAccount is the resolver for the updateDemoAccount field.
func (r *mutationResolver) UpdateDemoAccount(ctx context.Context, id string, email *string, password *string) (*model.DemoAccount, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":      objId,
		"email":    email,
		"password": password,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").ReplaceOne(ctx, filter, updated)
	return &model.DemoAccount{
		ID:       id,
		Email:    *email,
		Password: *password,
	}, err
}

// DeleteDemoAccount is the resolver for the deleteDemoAccount field.
func (r *mutationResolver) DeleteDemoAccount(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateTestAccount is the resolver for the createTestAccount field.
func (r *mutationResolver) CreateTestAccount(ctx context.Context, email string, password string) (*model.TestAccount, error) {
	var result model.TestAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newTestAccount := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").InsertOne(ctx, newTestAccount)
	if err != nil {
		return nil, err
	}
	entity := model.TestAccount{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateTestAccount is the resolver for the updateTestAccount field.
func (r *mutationResolver) UpdateTestAccount(ctx context.Context, id string, email *string, password *string) (*model.TestAccount, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":      objId,
		"email":    email,
		"password": password,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").ReplaceOne(ctx, filter, updated)
	return &model.TestAccount{
		ID:       id,
		Email:    *email,
		Password: *password,
	}, err
}

// DeleteTestAccount is the resolver for the deleteTestAccount field.
func (r *mutationResolver) DeleteTestAccount(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, diseases []*model.SessionDiseasesInput, symptoms []*model.SessionSymptomInput, age int, height int, weight int, sex string, anteChirs []string, anteDiseases []string, medicine []string, lastQuestion string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	newSession := bson.M{
		"diseases":      diseases,
		"symptoms":      symptoms,
		"age":           age,
		"height":        height,
		"weight":        weight,
		"sex":           sex,
		"ante_chirs":    anteChirs,
		"ante_diseases": anteDiseases,
		"medicine":      medicine,
		"last_question": lastQuestion,
		"logs":          logs,
		"alerts":        alerts,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").InsertOne(ctx, newSession)
	if err != nil {
		return nil, err
	}

	var convertedDiseases []*model.SessionDiseases
	for _, disease := range diseases {
		convertedDiseases = append(convertedDiseases, &model.SessionDiseases{Name: disease.Name, Presence: disease.Presence})
	}

	var convertedSymptoms []*model.SessionSymptom
	for _, symptom := range symptoms {
		convertedSymptoms = append(convertedSymptoms, &model.SessionSymptom{Name: symptom.Name, Presence: symptom.Presence, Duration: symptom.Duration, Treated: symptom.Treated})
	}

	var convertedLogs []*model.Logs
	for _, log := range logs {
		convertedLogs = append(convertedLogs, &model.Logs{Question: log.Question, Answer: log.Answer})
	}
	entity := model.Session{
		ID:           res.InsertedID.(primitive.ObjectID).Hex(),
		Diseases:     convertedDiseases,
		Symptoms:     convertedSymptoms,
		Age:          age,
		Height:       height,
		Weight:       weight,
		Sex:          sex,
		AnteChirs:    anteChirs,
		AnteDiseases: anteDiseases,
		Medicine:     medicine,
		LastQuestion: lastQuestion,
		Logs:         convertedLogs,
		Alerts:       alerts,
	}
	return &entity, err
}

// UpdateSession is the resolver for the updateSession field.
func (r *mutationResolver) UpdateSession(ctx context.Context, id string, diseases []*model.SessionDiseasesInput, symptoms []*model.SessionSymptomInput, age *int, height *int, weight *int, sex *string, anteChirs []string, anteDiseases []string, medicine []string, lastQuestion *string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":           objId,
		"diseases":      diseases,
		"symptoms":      symptoms,
		"age":           age,
		"height":        height,
		"weight":        weight,
		"sex":           sex,
		"ante_chirs":    anteChirs,
		"ante_diseases": anteDiseases,
		"medicine":      medicine,
		"last_question": lastQuestion,
		"logs":          logs,
		"alerts":        alerts,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").ReplaceOne(ctx, filter, updated)

	var convertedDiseases []*model.SessionDiseases
	for _, disease := range diseases {
		convertedDiseases = append(convertedDiseases, &model.SessionDiseases{Name: disease.Name, Presence: disease.Presence})
	}

	var convertedSymptoms []*model.SessionSymptom
	for _, symptom := range symptoms {
		convertedSymptoms = append(convertedSymptoms, &model.SessionSymptom{Name: symptom.Name, Presence: symptom.Presence, Duration: symptom.Duration, Treated: symptom.Treated})
	}

	var convertedLogs []*model.Logs
	for _, log := range logs {
		convertedLogs = append(convertedLogs, &model.Logs{Question: log.Question, Answer: log.Answer})
	}
	return &model.Session{
		ID:           id,
		Diseases:     convertedDiseases,
		Symptoms:     convertedSymptoms,
		Age:          *age,
		Height:       *height,
		Weight:       *weight,
		Sex:          *sex,
		AnteChirs:    anteChirs,
		AnteDiseases: anteDiseases,
		Medicine:     medicine,
		LastQuestion: *lastQuestion,
		Logs:         convertedLogs,
		Alerts:       alerts,
	}, err
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateSymptom is the resolver for the createSymptom field.
func (r *mutationResolver) CreateSymptom(ctx context.Context, code string, name string, chronic *int, symptom []string, advice *string, question string, questionBasic string, questionDuration string, questionAnte string) (*model.Symptom, error) {
	newSymptom := bson.M{
		"code":              code,
		"name":              name,
		"chronic":           chronic,
		"symptom":           symptom,
		"advice":            advice,
		"question":          question,
		"question_basic":    questionBasic,
		"question_duration": questionDuration,
		"question_ante":     questionAnte,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").InsertOne(ctx, newSymptom)
	if err != nil {
		return nil, err
	}
	entity := model.Symptom{
		ID:               res.InsertedID.(primitive.ObjectID).Hex(),
		Code:             code,
		Name:             name,
		Chronic:          chronic,
		Symptom:          symptom,
		Advice:           advice,
		Question:         question,
		QuestionBasic:    questionBasic,
		QuestionDuration: questionDuration,
		QuestionAnte:     questionAnte,
	}
	return &entity, err
}

// UpdateSymptom is the resolver for the updateSymptom field.
func (r *mutationResolver) UpdateSymptom(ctx context.Context, id string, code *string, name *string, chronic *int, symptom []string, advice *string, question *string, questionBasic *string, questionDuration *string, questionAnte *string) (*model.Symptom, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":               objId,
		"code":              code,
		"name":              name,
		"chronic":           chronic,
		"symptom":           symptom,
		"advice":            advice,
		"question":          question,
		"question_basic":    questionBasic,
		"question_duration": questionDuration,
		"question_ante":     questionAnte,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").ReplaceOne(ctx, filter, updated)

	return &model.Symptom{
		ID:               id,
		Code:             *code,
		Name:             *name,
		Chronic:          chronic,
		Symptom:          symptom,
		Advice:           advice,
		Question:         *question,
		QuestionBasic:    *questionBasic,
		QuestionDuration: *questionDuration,
		QuestionAnte:     *questionAnte,
	}, err
}

// DeleteSymptom is the resolver for the deleteSymptom field.
func (r *mutationResolver) DeleteSymptom(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDisease is the resolver for the createDisease field.
func (r *mutationResolver) CreateDisease(ctx context.Context, code string, name string, symptoms []string, symptomsWeight []*model.SymptomsWeightInput, overweightFactor float64, advice *string) (*model.Disease, error) {
	newDisease := bson.M{
		"code":            code,
		"name":            name,
		"symptoms":        symptoms,
		"symptoms_weight": symptomsWeight,
		"advice":          advice,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").InsertOne(ctx, newDisease)
	if err != nil {
		return nil, err
	}

	var convertedSymptomsWeight []*model.SymptomsWeight
	for _, acute := range symptomsWeight {
		convertedSymptomsWeight = append(convertedSymptomsWeight, &model.SymptomsWeight{
			Symptom: acute.Symptom,
			Value:   acute.Value,
		})
	}

	entity := model.Disease{
		ID:             res.InsertedID.(primitive.ObjectID).Hex(),
		Code:           code,
		Name:           name,
		Symptoms:       symptoms,
		SymptomsWeight: convertedSymptomsWeight,
		Advice:         advice,
	}
	return &entity, err
}

// UpdateDisease is the resolver for the updateDisease field.
func (r *mutationResolver) UpdateDisease(ctx context.Context, id string, code *string, name *string, symptoms []string, symptomsWeight []*model.SymptomsWeightInput, overweightFactor *float64, advice *string) (*model.Disease, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":             objId,
		"code":            code,
		"name":            name,
		"symptoms":        symptoms,
		"symptoms_weight": symptomsWeight,
		"advice":          advice,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").ReplaceOne(ctx, filter, updated)

	var convertedSymptomsWeight []*model.SymptomsWeight
	for _, acute := range symptomsWeight {
		convertedSymptomsWeight = append(convertedSymptomsWeight, &model.SymptomsWeight{
			Symptom: acute.Symptom,
			Value:   acute.Value,
		})
	}

	return &model.Disease{
		ID:             id,
		Code:           *code,
		Name:           *name,
		Symptoms:       symptoms,
		SymptomsWeight: convertedSymptomsWeight,
		Advice:         advice,
	}, err
}

// DeleteDisease is the resolver for the deleteDisease field.
func (r *mutationResolver) DeleteDisease(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, token string, message string, title string) (*model.Notification, error) {
	newNotification := bson.M{
		"token":   token,
		"message": message,
		"title":   title,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").InsertOne(ctx, newNotification)
	if err != nil {
		return nil, err
	}
	entity := model.Notification{
		ID:      res.InsertedID.(primitive.ObjectID).Hex(),
		Token:   token,
		Message: message,
		Title:   title,
	}
	return &entity, err
}

// UpdateNotification is the resolver for the updateNotification field.
func (r *mutationResolver) UpdateNotification(ctx context.Context, id string, token string, message string, title string) (*model.Notification, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":     objId,
		"token":   token,
		"message": message,
		"title":   title,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").ReplaceOne(ctx, filter, updated)

	return &model.Notification{
		ID:      id,
		Token:   token,
		Title:   title,
		Message: message,
	}, err
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateRdv is the resolver for the createRdv field.
func (r *mutationResolver) CreateRdv(ctx context.Context, idPatient string, doctorID string, startDate int, endDate int, appointmentStatus model.AppointmentStatus, sessionID string) (*model.Rdv, error) {
	newRdv := bson.M{
		"id_patient":         idPatient,
		"doctor_id":          doctorID,
		"start_date":         startDate,
		"end_date":           endDate,
		"appointment_status": appointmentStatus,
		"session_id":         sessionID,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").InsertOne(ctx, newRdv)
	if err != nil {
		return nil, err
	}
	entity := model.Rdv{
		ID:                res.InsertedID.(primitive.ObjectID).Hex(),
		DoctorID:          doctorID,
		IDPatient:         idPatient,
		StartDate:         startDate,
		EndDate:           endDate,
		CancelationReason: nil,
		AppointmentStatus: appointmentStatus,
		SessionID:         sessionID,
	}
	return &entity, err
}

// UpdateRdv is the resolver for the updateRdv field.
func (r *mutationResolver) UpdateRdv(ctx context.Context, id string, idPatient *string, doctorID *string, startDate *int, endDate *int, cancelationReason *string, appointmentStatus *model.AppointmentStatus, sessionID *string) (*model.Rdv, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":                objId,
		"id_patient":         idPatient,
		"doctor_id":          doctorID,
		"start_date":         startDate,
		"end_date":           endDate,
		"cancelation_reason": cancelationReason,
		"appointment_status": appointmentStatus,
		"session_id":         sessionID,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").ReplaceOne(ctx, filter, updated)

	return &model.Rdv{
		ID:                id,
		DoctorID:          *doctorID,
		IDPatient:         *idPatient,
		StartDate:         *startDate,
		EndDate:           *endDate,
		CancelationReason: cancelationReason,
		AppointmentStatus: *appointmentStatus,
		SessionID:         *sessionID,
	}, err
}

// DeleteRdv is the resolver for the deleteRdv field.
func (r *mutationResolver) DeleteRdv(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// DeleteSlot is the resolver for the deleteSlot field.
func (r *mutationResolver) DeleteSlot(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDocument is the resolver for the createDocument field.
func (r *mutationResolver) CreateDocument(ctx context.Context, ownerID string, name string, documentType string, category string, isFavorite bool, downloadURL string) (*model.Document, error) {
	newDocument := bson.M{
		"owner_id":      ownerID,
		"name":          name,
		"document_type": documentType,
		"category":      category,
		"is_favorite":   isFavorite,
		"download_url":  downloadURL,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").InsertOne(ctx, newDocument)
	if err != nil {
		return nil, err
	}
	entity := model.Document{
		ID:           res.InsertedID.(primitive.ObjectID).Hex(),
		OwnerID:      ownerID,
		Name:         name,
		DocumentType: model.DocumentType(documentType),
		Category:     model.Category(category),
		IsFavorite:   isFavorite,
		DownloadURL:  downloadURL,
	}
	return &entity, err
}

// UpdateDocument is the resolver for the updateDocument field.
func (r *mutationResolver) UpdateDocument(ctx context.Context, id string, name *string, isFavorite *bool) (*model.Document, error) {
	var replacement model.Document
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}
	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").FindOne(ctx, filter).Decode(&replacement)
	if err != nil {
		return nil, err
	}

	updated := bson.M{
		"_id":           objId,
		"owner_id":      replacement.OwnerID,
		"name":          name,
		"document_type": replacement.DocumentType,
		"category":      replacement.Category,
		"is_favorite":   isFavorite,
		"download_url":  replacement.DownloadURL,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").ReplaceOne(ctx, filter, updated)

	return &model.Document{
		ID:           id,
		OwnerID:      replacement.OwnerID,
		Name:         *name,
		DocumentType: replacement.DocumentType,
		Category:     replacement.Category,
		IsFavorite:   *isFavorite,
		DownloadURL:  replacement.DownloadURL,
	}, err
}

// DeleteDocument is the resolver for the deleteDocument field.
func (r *mutationResolver) DeleteDocument(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteChir is the resolver for the createAnteChir field.
func (r *mutationResolver) CreateAnteChir(ctx context.Context, name string, localisation string, inducedSymptoms []string) (*model.AnteChir, error) {
	newAnteChir := bson.M{
		"name":             name,
		"localisation":     localisation,
		"induced_symptoms": inducedSymptoms,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").InsertOne(ctx, newAnteChir)
	if err != nil {
		return nil, err
	}
	entity := model.AnteChir{
		ID:              res.InsertedID.(primitive.ObjectID).Hex(),
		Name:            name,
		Localisation:    localisation,
		InducedSymptoms: inducedSymptoms,
	}
	return &entity, err
}

// UpdateAnteChir is the resolver for the updateAnteChir field.
func (r *mutationResolver) UpdateAnteChir(ctx context.Context, id string, name *string, localisation *string, inducedSymptoms []string) (*model.AnteChir, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":              objId,
		"name":             name,
		"localisation":     localisation,
		"induced_symptoms": inducedSymptoms,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").ReplaceOne(ctx, filter, updated)

	return &model.AnteChir{
		ID:              id,
		Name:            *name,
		Localisation:    *localisation,
		InducedSymptoms: inducedSymptoms,
	}, err
}

// DeleteAnteChir is the resolver for the deleteAnteChir field.
func (r *mutationResolver) DeleteAnteChir(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteDisease is the resolver for the createAnteDisease field.
func (r *mutationResolver) CreateAnteDisease(ctx context.Context, name string, chronicity *float64, surgeryIds []string, symptoms []string, treatmentIds []string, stillRelevant bool) (*model.AnteDisease, error) {
	newAnteDisease := bson.M{
		"name":           name,
		"chronicity":     chronicity,
		"surgery_ids":    surgeryIds,
		"symptoms":       symptoms,
		"treatment_ids":  treatmentIds,
		"still_relevant": stillRelevant,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").InsertOne(ctx, newAnteDisease)
	if err != nil {
		return nil, err
	}
	entity := model.AnteDisease{
		ID:            res.InsertedID.(primitive.ObjectID).Hex(),
		Name:          name,
		Chronicity:    *chronicity,
		SurgeryIds:    surgeryIds,
		Symptoms:      symptoms,
		TreatmentIds:  treatmentIds,
		StillRelevant: stillRelevant,
	}
	return &entity, err
}

// UpdateAnteDisease is the resolver for the updateAnteDisease field.
func (r *mutationResolver) UpdateAnteDisease(ctx context.Context, id string, name *string, chronicity *float64, surgeryIds []string, symptoms []string, treatmentIds []string, stillRelevant *bool) (*model.AnteDisease, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":            objId,
		"name":           name,
		"chronicity":     chronicity,
		"surgery_ids":    surgeryIds,
		"symptoms":       symptoms,
		"treatment_ids":  treatmentIds,
		"still_relevant": stillRelevant,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").ReplaceOne(ctx, filter, updated)

	return &model.AnteDisease{
		ID:            id,
		Name:          *name,
		Chronicity:    *chronicity,
		SurgeryIds:    surgeryIds,
		Symptoms:      symptoms,
		TreatmentIds:  treatmentIds,
		StillRelevant: *stillRelevant,
	}, err
}

// DeleteAnteDisease is the resolver for the deleteAnteDisease field.
func (r *mutationResolver) DeleteAnteDisease(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteFamily is the resolver for the createAnteFamily field.
func (r *mutationResolver) CreateAnteFamily(ctx context.Context, name string, disease []string) (*model.AnteFamily, error) {
	newAnteFamily := bson.M{
		"name":    name,
		"disease": disease,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").InsertOne(ctx, newAnteFamily)
	if err != nil {
		return nil, err
	}
	entity := model.AnteFamily{
		ID:      res.InsertedID.(primitive.ObjectID).Hex(),
		Name:    "",
		Disease: disease,
	}
	return &entity, err
}

// UpdateAnteFamily is the resolver for the updateAnteFamily field.
func (r *mutationResolver) UpdateAnteFamily(ctx context.Context, id string, name *string, disease []string) (*model.AnteFamily, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":     objId,
		"name":    name,
		"disease": disease,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").ReplaceOne(ctx, filter, updated)

	return &model.AnteFamily{
		ID:      id,
		Name:    *name,
		Disease: disease,
	}, err
}

// DeleteAnteFamily is the resolver for the deleteAnteFamily field.
func (r *mutationResolver) DeleteAnteFamily(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateTreatment is the resolver for the createTreatment field.
func (r *mutationResolver) CreateTreatment(ctx context.Context, period []model.Period, day []model.Day, quantity int, medicineID string) (*model.Treatment, error) {
	newTreatment := bson.M{
		"period":      period,
		"day":         day,
		"quantity":    quantity,
		"medicine_id": medicineID,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").InsertOne(ctx, newTreatment)
	if err != nil {
		return nil, err
	}
	entity := model.Treatment{
		ID:         res.InsertedID.(primitive.ObjectID).Hex(),
		Period:     period,
		Day:        day,
		Quantity:   quantity,
		MedicineID: medicineID,
	}
	return &entity, err
}

// UpdateTreatment is the resolver for the updateTreatment field.
func (r *mutationResolver) UpdateTreatment(ctx context.Context, id string, period []model.Period, day []model.Day, quantity *int, medicineID *string) (*model.Treatment, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":         objId,
		"period":      period,
		"day":         day,
		"quantity":    quantity,
		"medicine_id": medicineID,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").ReplaceOne(ctx, filter, updated)

	return &model.Treatment{
		ID:         id,
		Period:     period,
		Day:        day,
		Quantity:   *quantity,
		MedicineID: *medicineID,
	}, err
}

// DeleteTreatment is the resolver for the deleteTreatment field.
func (r *mutationResolver) DeleteTreatment(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAlert is the resolver for the createAlert field.
func (r *mutationResolver) CreateAlert(ctx context.Context, name string, sex *string, height *int, weight *int, symptoms []string, comment string) (*model.Alert, error) {
	newAlert := bson.M{
		"name":     name,
		"sex":      sex,
		"height":   height,
		"weight":   weight,
		"symptoms": symptoms,
		"comment":  comment,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").InsertOne(ctx, newAlert)
	if err != nil {
		return nil, err
	}
	entity := model.Alert{
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
		Name:     name,
		Sex:      sex,
		Height:   height,
		Weight:   weight,
		Symptoms: symptoms,
		Comment:  comment,
	}
	return &entity, err
}

// UpdateAlert is the resolver for the updateAlert field.
func (r *mutationResolver) UpdateAlert(ctx context.Context, id string, name *string, sex *string, height *int, weight *int, symptoms []string, comment *string) (*model.Alert, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":      objId,
		"name":     name,
		"sex":      sex,
		"height":   height,
		"weight":   weight,
		"symptoms": symptoms,
		"comment":  comment,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").ReplaceOne(ctx, filter, updated)

	return &model.Alert{
		ID:       id,
		Name:     *name,
		Sex:      sex,
		Height:   height,
		Weight:   weight,
		Symptoms: symptoms,
		Comment:  *comment,
	}, err
}

// DeleteAlert is the resolver for the deleteAlert field.
func (r *mutationResolver) DeleteAlert(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateMedicine is the resolver for the createMedicine field.
func (r *mutationResolver) CreateMedicine(ctx context.Context, name string, unit *string, targetDiseases []string, treatedSymptoms []string, sideEffects []string) (*model.Medicine, error) {
	newMedicine := bson.M{
		"name":             name,
		"unit":             unit,
		"target_diseases":  targetDiseases,
		"treated_symptoms": treatedSymptoms,
		"side_effects":     sideEffects,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Medicine").InsertOne(ctx, newMedicine)
	if err != nil {
		return nil, err
	}
	entity := model.Medicine{
		ID:              res.InsertedID.(primitive.ObjectID).Hex(),
		Name:            name,
		Unit:            model.MedicineUnit(*unit),
		TargetDiseases:  targetDiseases,
		TreatedSymptoms: treatedSymptoms,
		SideEffects:     sideEffects,
	}
	return &entity, err
}

// DeleteMedicine is the resolver for the deleteMedicine field.
func (r *mutationResolver) DeleteMedicine(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Medicine").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true

	return &resp, nil
}

// CreateMedicalFolder is the resolver for the createMedicalFolder field.
func (r *mutationResolver) CreateMedicalFolder(ctx context.Context, name string, firstname string, birthdate int, sex string, height int, weight int, primaryDoctorID string, antecedentDiseaseIds []string, onboardingStatus string) (*model.MedicalInfo, error) {
	newMedicalInfo := bson.M{
		"name":                   name,
		"firstname":              firstname,
		"birthdate":              birthdate,
		"sex":                    sex,
		"height":                 height,
		"weight":                 weight,
		"primary_doctor_id":      primaryDoctorID,
		"antecedent_disease_ids": antecedentDiseaseIds,
		"onboarding_status":      onboardingStatus,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("MedicalInfo").InsertOne(ctx, newMedicalInfo)
	if err != nil {
		return nil, err
	}

	entity := model.MedicalInfo{
		ID:                   res.InsertedID.(primitive.ObjectID).Hex(),
		Name:                 name,
		Firstname:            firstname,
		Birthdate:            birthdate,
		Sex:                  model.Sex(sex),
		Height:               height,
		Weight:               weight,
		PrimaryDoctorID:      primaryDoctorID,
		AntecedentDiseaseIds: antecedentDiseaseIds,
		OnboardingStatus:     model.OnboardingStatus(onboardingStatus),
	}
	return &entity, err
}

// UpdateMedicalFolder is the resolver for the updateMedicalFolder field.
func (r *mutationResolver) UpdateMedicalFolder(ctx context.Context, id string, name *string, firstname *string, birthdate *int, sex *string, height *int, weight *int, primaryDoctorID *string, antecedentDiseaseIds []string, onboardingStatus *model.OnboardingStatus) (*model.MedicalInfo, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":                    objId,
		"name":                   name,
		"firstname":              firstname,
		"birthdate":              birthdate,
		"sex":                    sex,
		"height":                 height,
		"weight":                 weight,
		"primary_doctor_id":      primaryDoctorID,
		"antecedent_disease_ids": antecedentDiseaseIds,
		"onboarding_status":      onboardingStatus,
	}

	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("MedicalInfo").ReplaceOne(ctx, filter, updated)

	return &model.MedicalInfo{
		ID:                   id,
		Name:                 *name,
		Firstname:            *firstname,
		Birthdate:            *birthdate,
		Sex:                  model.Sex(*sex),
		Height:               *height,
		Weight:               *weight,
		PrimaryDoctorID:      *primaryDoctorID,
		AntecedentDiseaseIds: antecedentDiseaseIds,
		OnboardingStatus:     model.OnboardingStatus(*onboardingStatus),
	}, err
}

// DeleteMedicalFolder is the resolver for the deleteMedicalFolder field.
func (r *mutationResolver) DeleteMedicalFolder(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("MedicalInfo").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true

	return &resp, nil
}

// CreateTreatmentsFollowUp is the resolver for the createTreatmentsFollowUp field.
func (r *mutationResolver) CreateTreatmentsFollowUp(ctx context.Context, treatmentID string, date int, period []model.Period) (*model.TreatmentsFollowUp, error) {
	newFollowUp := bson.M{
		"treatment_id": treatmentID,
		"date":         date,
		"period":       period,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TreatmentsFollowUp").InsertOne(ctx, newFollowUp)
	if err != nil {
		return nil, err
	}
	entity := model.TreatmentsFollowUp{
		ID:          res.InsertedID.(primitive.ObjectID).Hex(),
		TreatmentID: treatmentID,
		Date:        date,
		Period:      period,
	}
	return &entity, err
}

// UpdateTreatmentsFollowUp is the resolver for the updateTreatmentsFollowUp field.
func (r *mutationResolver) UpdateTreatmentsFollowUp(ctx context.Context, id string, treatmentID *string, date *int, period []model.Period) (*model.TreatmentsFollowUp, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}

	updated := bson.M{
		"_id":          objId,
		"treatment_id": treatmentID,
		"date":         date,
		"period":       period,
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TreatmentsFollowUp").ReplaceOne(ctx, filter, updated)

	return &model.TreatmentsFollowUp{
		ID:          id,
		TreatmentID: *treatmentID,
		Date:        *date,
		Period:      period,
	}, err
}

// DeleteTreatmentsFollowUp is the resolver for the deleteTreatmentsFollowUp field.
func (r *mutationResolver) DeleteTreatmentsFollowUp(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TreatmentsFollowUp").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true

	return &resp, nil
}

// CreateNlpReport is the resolver for the createNlpReport field.
func (r *mutationResolver) CreateNlpReport(ctx context.Context, version int, inputSymptoms []string, inputSentence string, output []*model.NlpReportOutputInput, computationTime int) (*model.NlpReport, error) {
	newNlpReport := bson.M{
		"version":          version,
		"input_symptoms":   inputSymptoms,
		"input_sentence":   inputSentence,
		"output":           output,
		"computation_time": computationTime,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("NlpReport").InsertOne(ctx, newNlpReport)
	if err != nil {
		return nil, err
	}

	var transformedOutput []*model.NlpReportOutput
	for _, val := range output {
		transformedOutput = append(transformedOutput, &model.NlpReportOutput{
			Symptom: val.Symptom,
			Present: val.Present,
		})
	}
	entity := model.NlpReport{
		ID:              res.InsertedID.(primitive.ObjectID).Hex(),
		Version:         version,
		InputSymptoms:   inputSymptoms,
		InputSentence:   inputSentence,
		Output:          transformedOutput,
		ComputationTime: computationTime,
	}
	return &entity, err
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, participants []*model.ChatParticipantsInput, messages []*model.ChatMessagesInput) (*model.Chat, error) {
	chat := bson.M{
		"participants": participants,
		"messages":     messages,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Chat").InsertOne(ctx, chat)
	if err != nil {
		return nil, err
	}

	var transformedParticipantsOutput []*model.ChatParticipants
	for _, val := range participants {
		transformedParticipantsOutput = append(transformedParticipantsOutput, &model.ChatParticipants{
			ParticipantID: val.ParticipantID,
			LastSeen:      val.LastSeen,
		})
	}

	var transformedMessagesOutput []*model.ChatMessages
	for _, val := range messages {
		transformedMessagesOutput = append(transformedMessagesOutput, &model.ChatMessages{
			OwnerID:    val.OwnerID,
			Message:    val.Message,
			SendedTime: val.SendedTime,
		})
	}
	entity := model.Chat{
		ID:           res.InsertedID.(primitive.ObjectID).Hex(),
		Participants: transformedParticipantsOutput,
		Messages:     transformedMessagesOutput,
	}
	return &entity, err
}

// UpdateChat is the resolver for the updateChat field.
func (r *mutationResolver) UpdateChat(ctx context.Context, id string, participants []*model.ChatParticipantsInput, messages []*model.ChatMessagesInput) (*model.Chat, error) {
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objID}
	update := bson.M{
		"$set": bson.M{
			"participants": participants,
			"messages":     messages,
		},
	}

	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Chat").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Transform the inputs to the desired model types
	var transformedParticipants []*model.ChatParticipants
	for _, p := range participants {
		transformedParticipants = append(transformedParticipants, &model.ChatParticipants{
			ParticipantID: p.ParticipantID,
			LastSeen:      p.LastSeen,
		})
	}

	var transformedMessages []*model.ChatMessages
	for _, m := range messages {
		transformedMessages = append(transformedMessages, &model.ChatMessages{
			OwnerID:    m.OwnerID,
			Message:    m.Message,
			SendedTime: m.SendedTime,
		})
	}

	entity := model.Chat{
		ID:           id,
		Participants: transformedParticipants,
		Messages:     transformedMessages,
	}

	return &entity, nil
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Chat").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// GetPatients is the resolver for the getPatients field.
func (r *queryResolver) GetPatients(ctx context.Context) ([]*model.Patient, error) {
	filter := bson.D{}
	var results []*model.Patient

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetPatientByID is the resolver for the getPatientById field.
func (r *queryResolver) GetPatientByID(ctx context.Context, id string) (*model.Patient, error) {
	var result model.Patient
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientByEmail is the resolver for the getPatientByEmail field.
func (r *queryResolver) GetPatientByEmail(ctx context.Context, email string) (*model.Patient, error) {
	var result model.Patient

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDoctors is the resolver for the getDoctors field.
func (r *queryResolver) GetDoctors(ctx context.Context) ([]*model.Doctor, error) {
	filter := bson.D{}
	var results []*model.Doctor

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDoctorByID is the resolver for the getDoctorById field.
func (r *queryResolver) GetDoctorByID(ctx context.Context, id string) (*model.Doctor, error) {
	var result model.Doctor
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDoctorByEmail is the resolver for the getDoctorByEmail field.
func (r *queryResolver) GetDoctorByEmail(ctx context.Context, email string) (*model.Doctor, error) {
	var result model.Doctor

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAdmins is the resolver for the getAdmins field.
func (r *queryResolver) GetAdmins(ctx context.Context) ([]*model.Admin, error) {
	filter := bson.D{}
	var results []*model.Admin

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAdminByID is the resolver for the getAdminById field.
func (r *queryResolver) GetAdminByID(ctx context.Context, id string) (*model.Admin, error) {
	var result model.Admin
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAdminByEmail is the resolver for the getAdminByEmail field.
func (r *queryResolver) GetAdminByEmail(ctx context.Context, email string) (*model.Admin, error) {
	var result model.Admin

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDemoAccounts is the resolver for the getDemoAccounts field.
func (r *queryResolver) GetDemoAccounts(ctx context.Context) ([]*model.DemoAccount, error) {
	filter := bson.D{}
	var results []*model.DemoAccount

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDemoAccountByID is the resolver for the getDemoAccountById field.
func (r *queryResolver) GetDemoAccountByID(ctx context.Context, id string) (*model.DemoAccount, error) {
	var result model.DemoAccount
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDemoAccountByEmail is the resolver for the getDemoAccountByEmail field.
func (r *queryResolver) GetDemoAccountByEmail(ctx context.Context, email string) (*model.DemoAccount, error) {
	var result model.DemoAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTestAccounts is the resolver for the getTestAccounts field.
func (r *queryResolver) GetTestAccounts(ctx context.Context) ([]*model.TestAccount, error) {
	filter := bson.D{}
	var results []*model.TestAccount

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetTestAccountByID is the resolver for the getTestAccountById field.
func (r *queryResolver) GetTestAccountByID(ctx context.Context, id string) (*model.TestAccount, error) {
	var result model.TestAccount
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTestAccountByEmail is the resolver for the getTestAccountByEmail field.
func (r *queryResolver) GetTestAccountByEmail(ctx context.Context, email string) (*model.TestAccount, error) {
	var result model.TestAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSessions is the resolver for the getSessions field.
func (r *queryResolver) GetSessions(ctx context.Context) ([]*model.Session, error) {
	filter := bson.D{}
	var results []*model.Session

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetSessionByID is the resolver for the getSessionById field.
func (r *queryResolver) GetSessionByID(ctx context.Context, id string) (*model.Session, error) {
	var result model.Session
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSymptomByID is the resolver for the getSymptomById field.
func (r *queryResolver) GetSymptomByID(ctx context.Context, id string) (*model.Symptom, error) {
	var result model.Symptom
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDiseaseByID is the resolver for the getDiseaseById field.
func (r *queryResolver) GetDiseaseByID(ctx context.Context, id string) (*model.Disease, error) {
	var result model.Disease
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSymptoms is the resolver for the getSymptoms field.
func (r *queryResolver) GetSymptoms(ctx context.Context) ([]*model.Symptom, error) {
	filter := bson.D{}
	var results []*model.Symptom

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDiseases is the resolver for the getDiseases field.
func (r *queryResolver) GetDiseases(ctx context.Context) ([]*model.Disease, error) {
	filter := bson.D{}
	var results []*model.Disease

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context) ([]*model.Notification, error) {
	filter := bson.D{}
	var results []*model.Notification

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetNotificationByID is the resolver for the getNotificationById field.
func (r *queryResolver) GetNotificationByID(ctx context.Context, id string) (*model.Notification, error) {
	var result model.Notification
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientRdv is the resolver for the getPatientRdv field.
func (r *queryResolver) GetPatientRdv(ctx context.Context, idPatient string) ([]*model.Rdv, error) {
	var results []*model.Rdv
	objId, err := primitive.ObjectIDFromHex(idPatient)
	if err != nil {
		return nil, err
	}

	patientFilter := bson.M{"_id": objId}

	test := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, patientFilter)

	if test.Err() != nil {
		return nil, test.Err()
	}

	filter := bson.M{"id_patient": idPatient}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDoctorRdv is the resolver for the getDoctorRdv field.
func (r *queryResolver) GetDoctorRdv(ctx context.Context, doctorID string) ([]*model.Rdv, error) {
	var results []*model.Rdv
	objId, err := primitive.ObjectIDFromHex(doctorID)
	if err != nil {
		return nil, err
	}

	doctorFilter := bson.M{"_id": objId}

	test := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, doctorFilter)

	if test.Err() != nil {
		return nil, test.Err()
	}
	filter := bson.M{
		"doctor_id":          doctorID,
		"appointment_status": bson.M{"$ne": "OPENED"},
	}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetRdvByID is the resolver for the getRdvById field.
func (r *queryResolver) GetRdvByID(ctx context.Context, id string) (*model.Rdv, error) {
	var result model.Rdv
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{
		"_id":                objId,
		"appointment_status": bson.M{"$ne": "OPENED"},
	}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSlotByID is the resolver for the getSlotById field.
func (r *queryResolver) GetSlotByID(ctx context.Context, id string) (*model.Rdv, error) {
	var result model.Rdv
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{
		"_id": objId,
	}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSlots is the resolver for the getSlots field.
func (r *queryResolver) GetSlots(ctx context.Context, id string) ([]*model.Rdv, error) {
	var results []*model.Rdv

	filter := bson.M{
		"doctor_id": id,
	}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetWaitingRdv is the resolver for the getWaitingRdv field.
func (r *queryResolver) GetWaitingRdv(ctx context.Context, doctorID string) ([]*model.Rdv, error) {
	var results []*model.Rdv
	objId, err := primitive.ObjectIDFromHex(doctorID)
	if err != nil {
		return nil, err
	}

	doctorFilter := bson.M{"_id": objId}

	test := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, doctorFilter)

	if test.Err() != nil {
		return nil, test.Err()
	}

	filter := bson.M{
		"doctor_id":          doctorID,
		"appointment_status": "WAITING_FOR_REVIEW",
	}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDocuments is the resolver for the getDocuments field.
func (r *queryResolver) GetDocuments(ctx context.Context) ([]*model.Document, error) {
	filter := bson.D{}
	var results []*model.Document

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDocumentByID is the resolver for the getDocumentById field.
func (r *queryResolver) GetDocumentByID(ctx context.Context, id string) (*model.Document, error) {
	var result model.Document
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientDocument is the resolver for the getPatientDocument field.
func (r *queryResolver) GetPatientDocument(ctx context.Context, id string) ([]*model.Document, error) {
	var results []*model.Document

	filter := bson.M{"owner_id": id}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteChirs is the resolver for the getAnteChirs field.
func (r *queryResolver) GetAnteChirs(ctx context.Context) ([]*model.AnteChir, error) {
	filter := bson.D{}
	var results []*model.AnteChir

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteChirByID is the resolver for the getAnteChirByID field.
func (r *queryResolver) GetAnteChirByID(ctx context.Context, id string) (*model.AnteChir, error) {
	var result model.AnteChir
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAnteDiseases is the resolver for the getAnteDiseases field.
func (r *queryResolver) GetAnteDiseases(ctx context.Context) ([]*model.AnteDisease, error) {
	filter := bson.D{}
	var results []*model.AnteDisease

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteDiseaseByID is the resolver for the getAnteDiseaseByID field.
func (r *queryResolver) GetAnteDiseaseByID(ctx context.Context, id string) (*model.AnteDisease, error) {
	var result model.AnteDisease
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAnteFamilies is the resolver for the getAnteFamilies field.
func (r *queryResolver) GetAnteFamilies(ctx context.Context) ([]*model.AnteFamily, error) {
	filter := bson.D{}
	var results []*model.AnteFamily

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteFamilyByID is the resolver for the getAnteFamilyByID field.
func (r *queryResolver) GetAnteFamilyByID(ctx context.Context, id string) (*model.AnteFamily, error) {
	var result model.AnteFamily
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTreatments is the resolver for the getTreatments field.
func (r *queryResolver) GetTreatments(ctx context.Context) ([]*model.Treatment, error) {
	filter := bson.D{}
	var results []*model.Treatment

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetTreatmentByID is the resolver for the getTreatmentByID field.
func (r *queryResolver) GetTreatmentByID(ctx context.Context, id string) (*model.Treatment, error) {
	var result model.Treatment
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAlerts is the resolver for the getAlerts field.
func (r *queryResolver) GetAlerts(ctx context.Context) ([]*model.Alert, error) {
	filter := bson.D{}
	var results []*model.Alert

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAlertByID is the resolver for the getAlertById field.
func (r *queryResolver) GetAlertByID(ctx context.Context, id string) (*model.Alert, error) {
	var result model.Alert
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetMedicalFolder is the resolver for the getMedicalFolder field.
func (r *queryResolver) GetMedicalFolder(ctx context.Context) ([]*model.MedicalInfo, error) {
	var results []*model.MedicalInfo
	filter := bson.D{}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("MedicalInfo").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// GetMedicalFolderByID is the resolver for the getMedicalFolderById field.
func (r *queryResolver) GetMedicalFolderByID(ctx context.Context, id string) (*model.MedicalInfo, error) {
	var result model.MedicalInfo
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("MedicalInfo").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

// GetMedicines is the resolver for the getMedicines field.
func (r *queryResolver) GetMedicines(ctx context.Context) ([]*model.Medicine, error) {
	var results []*model.Medicine
	filter := bson.D{}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Medicine").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// GetMedicineByID is the resolver for the getMedicineByID field.
func (r *queryResolver) GetMedicineByID(ctx context.Context, id string) (*model.Medicine, error) {
	var result model.Medicine
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Medicine").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

// GetPatientsFromDoctorByID is the resolver for the getPatientsFromDoctorById field.
func (r *queryResolver) GetPatientsFromDoctorByID(ctx context.Context, id string) ([]*model.Patient, error) {
	var doctor model.Doctor
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&doctor)
	if err != nil {
		return nil, err
	}

	var patients []*model.Patient
	for _, patientId := range doctor.PatientIds {
		var patient model.Patient
		objId, err := primitive.ObjectIDFromHex(*patientId)
		if err != nil {
			return nil, err
		}

		filter := bson.M{"_id": objId}
		err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&patient)
		if err != nil {
			return nil, err
		}
		patients = append(patients, &patient)
	}
	return patients, nil
}

// GetTreatmentsFollowUpByID is the resolver for the getTreatmentsFollowUpById field.
func (r *queryResolver) GetTreatmentsFollowUpByID(ctx context.Context, id string) (*model.TreatmentsFollowUp, error) {
	var result model.TreatmentsFollowUp
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TreatmentsFollowUp").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTreatmentsFollowUps is the resolver for the getTreatmentsFollowUps field.
func (r *queryResolver) GetTreatmentsFollowUps(ctx context.Context, id string) ([]*model.TreatmentsFollowUp, error) {
	var patient model.Patient
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	patientFilter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, patientFilter).Decode(&patient)
	if err != nil {
		return nil, err
	}

	var followUp []*model.TreatmentsFollowUp
	for _, treatmentFollowUpIds := range patient.TreatmentFollowUpIds {
		var treatmentFollowUp model.TreatmentsFollowUp
		objId, err := primitive.ObjectIDFromHex(*treatmentFollowUpIds)
		if err != nil {
			return nil, err
		}

		filter := bson.M{"_id": objId}
		err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TreatmentsFollowUp").FindOne(ctx, filter).Decode(&treatmentFollowUp)
		if err != nil {
			return nil, err
		}
		followUp = append(followUp, &treatmentFollowUp)
	}
	return followUp, nil
}

// GetNlpReports is the resolver for the getNlpReports field.
func (r *queryResolver) GetNlpReports(ctx context.Context) ([]*model.NlpReport, error) {
	var report []*model.NlpReport
	filter := bson.D{}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("NlpReport").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &report)
	if err != nil {
		return nil, err
	}

	return report, nil
}

// GetNlpReportsByVersion is the resolver for the getNlpReportsByVersion field.
func (r *queryResolver) GetNlpReportsByVersion(ctx context.Context, version int) ([]*model.NlpReport, error) {
	var report []*model.NlpReport
	filter := bson.M{"version": version}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("NlpReport").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &report)
	if err != nil {
		return nil, err
	}

	return report, nil
}

// GetChats is the resolver for the getChats field.
func (r *queryResolver) GetChats(ctx context.Context, id string) ([]*model.Chat, error) {
	var patient model.Patient
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	patientFilter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, patientFilter).Decode(&patient)
	if err != nil {
		return nil, err
	}

	var followUp []*model.Chat
	for _, chat_ids := range patient.ChatIds {
		var chat model.Chat
		objId, err := primitive.ObjectIDFromHex(*chat_ids)
		if err != nil {
			return nil, err
		}

		filter := bson.M{"_id": objId}
		err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Chat").FindOne(ctx, filter).Decode(&chat)
		if err != nil {
			return nil, err
		}
		followUp = append(followUp, &chat)
	}
	return followUp, nil
}

// GetChatByID is the resolver for the getChatById field.
func (r *queryResolver) GetChatByID(ctx context.Context, id string) (*model.Chat, error) {
	var result model.Chat
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Chat").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
