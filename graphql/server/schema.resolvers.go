package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"os"

	"github.com/edgar-care/edgarlib/graphql/server/model"
)

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, email string, password string) (*model.Patient, error) {
	var result model.Patient

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newPatient := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").InsertOne(ctx, newPatient)
	if err != nil {
		return nil, err
	}
	entity := model.Patient{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdatePatient is the resolver for the updatePatient field.
func (r *mutationResolver) UpdatePatient(ctx context.Context, id string, email *string, password *string, onboardingInfoID *string, onboardingHealthID *string, rendezVousIds []*string, documentIds []*string) (*model.Patient, error) {
	var replacement model.Patient
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": objId}
	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&replacement)
	if err != nil {
		return nil, err
	}

	updated := bson.M{
		"_id":                  objId,
		"email":                replacement.Email,
		"password":             replacement.Password,
		"rendez_vous_ids":      replacement.RendezVousIds,
		"onboarding_info_id":   replacement.OnboardingInfoID,
		"onboarding_health_id": replacement.OnboardingHealthID,
		"document_ids":         replacement.DocumentIds,
	}
	if email != nil {
		updated["email"] = *email
		replacement.Email = *email
	}
	if password != nil {
		updated["password"] = *password
		replacement.Password = *password
	}
	if onboardingInfoID != nil {
		updated["rendez_vous_ids"] = onboardingInfoID
		replacement.OnboardingInfoID = onboardingInfoID
	}
	if onboardingHealthID != nil {
		updated["onboarding_info_id"] = onboardingHealthID
		replacement.OnboardingHealthID = onboardingHealthID
	}
	if rendezVousIds != nil {
		updated["onboarding_health_id"] = rendezVousIds
		replacement.RendezVousIds = rendezVousIds
	}
	if documentIds != nil {
		updated["document_ids"] = documentIds
		replacement.DocumentIds = documentIds
	}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").ReplaceOne(ctx, filter, updated)
	return &replacement, err
}

// DeletePatient is the resolver for the deletePatient field.
func (r *mutationResolver) DeletePatient(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDoctor is the resolver for the createDoctor field.
func (r *mutationResolver) CreateDoctor(ctx context.Context, email string, password string) (*model.Doctor, error) {
	var result model.Doctor

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newDoctor := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").InsertOne(ctx, newDoctor)
	if err != nil {
		return nil, err
	}
	entity := model.Doctor{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateDoctor is the resolver for the updateDoctor field.
func (r *mutationResolver) UpdateDoctor(ctx context.Context, id string, email *string, password *string, rendezVousIds []*string, patientIds []*string) (*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: UpdateDoctor - updateDoctor"))
}

// DeleteDoctor is the resolver for the deleteDoctor field.
func (r *mutationResolver) DeleteDoctor(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAdmin is the resolver for the createAdmin field.
func (r *mutationResolver) CreateAdmin(ctx context.Context, email string, password string, name string, lastName string) (*model.Admin, error) {
	var result model.Admin

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newAdmin := bson.M{
		"email":     email,
		"password":  password,
		"name":      name,
		"last_name": lastName,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").InsertOne(ctx, newAdmin)
	if err != nil {
		return nil, err
	}
	entity := model.Admin{
		Email:    email,
		Password: password,
		Name:     name,
		LastName: lastName,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateAdmin is the resolver for the updateAdmin field.
func (r *mutationResolver) UpdateAdmin(ctx context.Context, id string, email *string, password *string, name *string, lastName *string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: UpdateAdmin - updateAdmin"))
}

// DeleteAdmin is the resolver for the deleteAdmin field.
func (r *mutationResolver) DeleteAdmin(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDemoAccount is the resolver for the createDemoAccount field.
func (r *mutationResolver) CreateDemoAccount(ctx context.Context, email string, password string) (*model.DemoAccount, error) {
	var result model.DemoAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newDemoAccount := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").InsertOne(ctx, newDemoAccount)
	if err != nil {
		return nil, err
	}
	entity := model.DemoAccount{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateDemoAccount is the resolver for the updateDemoAccount field.
func (r *mutationResolver) UpdateDemoAccount(ctx context.Context, id string, email *string, password *string) (*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: UpdateDemoAccount - updateDemoAccount"))
}

// DeleteDemoAccount is the resolver for the deleteDemoAccount field.
func (r *mutationResolver) DeleteDemoAccount(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateTestAccount is the resolver for the createTestAccount field.
func (r *mutationResolver) CreateTestAccount(ctx context.Context, email string, password string) (*model.TestAccount, error) {
	var result model.TestAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err == nil {
		return nil, errors.New("Email already exists")
	}

	newTestAccount := bson.M{
		"email":    email,
		"password": password,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").InsertOne(ctx, newTestAccount)
	if err != nil {
		return nil, err
	}
	entity := model.TestAccount{
		Email:    email,
		Password: password,
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
	}
	return &entity, err
}

// UpdateTestAccount is the resolver for the updateTestAccount field.
func (r *mutationResolver) UpdateTestAccount(ctx context.Context, id string, email *string, password *string) (*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: UpdateTestAccount - updateTestAccount"))
}

// DeleteTestAccount is the resolver for the deleteTestAccount field.
func (r *mutationResolver) DeleteTestAccount(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, symptoms []string, age int, height int, weight int, sex string, lastQuestion string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	newSession := bson.M{
		"symptoms":     symptoms,
		"age":          age,
		"height":       height,
		"weight":       weight,
		"sex":          sex,
		"lastQuestion": lastQuestion,
		"logs":         logs,
		"alerts":       alerts,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").InsertOne(ctx, newSession)
	if err != nil {
		return nil, err
	}

	var convertedLogs []*model.Logs
	for _, log := range logs {
		convertedLogs = append(convertedLogs, &model.Logs{Question: log.Question, Answer: log.Answer})
	}
	entity := model.Session{
		ID:           res.InsertedID.(primitive.ObjectID).Hex(),
		Symptoms:     symptoms,
		Age:          age,
		Height:       height,
		Weight:       weight,
		Sex:          sex,
		LastQuestion: lastQuestion,
		Logs:         convertedLogs,
		Alerts:       alerts,
	}
	return &entity, err
}

// UpdateSession is the resolver for the updateSession field.
func (r *mutationResolver) UpdateSession(ctx context.Context, id string, symptoms []string, age *int, height *int, weight *int, sex *string, lastQuestion *string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: UpdateSession - updateSession"))
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateSymptom is the resolver for the createSymptom field.
func (r *mutationResolver) CreateSymptom(ctx context.Context, code string, name string, location *string, duration *int, acute *int, subacute *int, chronic *int, symptom []string, advice *string, question string) (*model.Symptom, error) {
	newSymptom := bson.M{
		"code":     code,
		"name":     name,
		"location": location,
		"duration": duration,
		"acute":    acute,
		"subacute": subacute,
		"chronic":  chronic,
		"symptom":  symptom,
		"advice":   advice,
		"question": question,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").InsertOne(ctx, newSymptom)
	if err != nil {
		return nil, err
	}
	entity := model.Symptom{
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
		Code:     code,
		Name:     name,
		Location: location,
		Duration: duration,
		Acute:    acute,
		Subacute: subacute,
		Chronic:  chronic,
		Symptom:  symptom,
		Advice:   advice,
		Question: question,
	}
	return &entity, err
}

// UpdateSymptom is the resolver for the updateSymptom field.
func (r *mutationResolver) UpdateSymptom(ctx context.Context, id string, code *string, name *string, location *string, duration *int, acute *int, subacute *int, chronic *int, symptom []string, advice *string, question *string) (*model.Symptom, error) {
	panic(fmt.Errorf("not implemented: UpdateSymptom - updateSymptom"))
}

// DeleteSymptom is the resolver for the deleteSymptom field.
func (r *mutationResolver) DeleteSymptom(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDisease is the resolver for the createDisease field.
func (r *mutationResolver) CreateDisease(ctx context.Context, code string, name string, symptoms []string, symptomsAcute []*model.SymptomWeightInput, symptomsSubacute []*model.SymptomWeightInput, symptomsChronic []*model.SymptomWeightInput, advice *string) (*model.Disease, error) {
	newDisease := bson.M{
		"code":             code,
		"name":             name,
		"symptoms":         symptoms,
		"symptomsAcute":    symptomsAcute,
		"symptomsSubacute": symptomsSubacute,
		"symptomsChronic":  symptomsChronic,
		"advice":           advice,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").InsertOne(ctx, newDisease)
	if err != nil {
		return nil, err
	}

	var convertedAcute []*model.SymptomWeight
	for _, acute := range symptomsAcute {
		convertedAcute = append(convertedAcute, &model.SymptomWeight{
			Key:   acute.Key,
			Value: acute.Value,
		})
	}
	var convertedSubAcute []*model.SymptomWeight
	for _, sub := range symptomsSubacute {
		convertedSubAcute = append(convertedSubAcute, &model.SymptomWeight{
			Key:   sub.Key,
			Value: sub.Value,
		})
	}
	var convertedChronic []*model.SymptomWeight
	for _, chronic := range symptomsChronic {
		convertedChronic = append(convertedChronic, &model.SymptomWeight{
			Key:   chronic.Key,
			Value: chronic.Value,
		})
	}

	entity := model.Disease{
		ID:               res.InsertedID.(primitive.ObjectID).Hex(),
		Code:             code,
		Name:             name,
		Symptoms:         symptoms,
		SymptomsAcute:    convertedAcute,
		SymptomsSubacute: convertedSubAcute,
		SymptomsChronic:  convertedChronic,
		Advice:           advice,
	}
	return &entity, err
}

// UpdateDisease is the resolver for the updateDisease field.
func (r *mutationResolver) UpdateDisease(ctx context.Context, id string, code *string, name *string, symptoms []string, symptomsAcute []*model.SymptomWeightInput, symptomsSubacute []*model.SymptomWeightInput, symptomsChronic []*model.SymptomWeightInput, advice *string) (*model.Disease, error) {
	panic(fmt.Errorf("not implemented: UpdateDisease - updateDisease"))
}

// DeleteDisease is the resolver for the deleteDisease field.
func (r *mutationResolver) DeleteDisease(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateInfo is the resolver for the createInfo field.
func (r *mutationResolver) CreateInfo(ctx context.Context, name string, birthdate string, height int, weight int, sex string, surname string) (*model.Info, error) {
	newInfo := bson.M{
		"name":      name,
		"birthdate": birthdate,
		"height":    height,
		"weight":    weight,
		"sex":       sex,
		"surname":   surname,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Info").InsertOne(ctx, newInfo)
	if err != nil {
		return nil, err
	}
	entity := model.Info{
		ID:        res.InsertedID.(primitive.ObjectID).Hex(),
		Name:      name,
		Birthdate: birthdate,
		Height:    height,
		Weight:    weight,
		Sex:       model.Sex(sex),
		Surname:   surname,
	}
	return &entity, err
}

// UpdateInfo is the resolver for the updateInfo field.
func (r *mutationResolver) UpdateInfo(ctx context.Context, id string, name *string, birthdate *string, height *int, weight *int, sex *string, surname *string) (*model.Info, error) {
	panic(fmt.Errorf("not implemented: UpdateInfo - updateInfo"))
}

// DeleteInfo is the resolver for the deleteInfo field.
func (r *mutationResolver) DeleteInfo(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Info").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateHealth is the resolver for the createHealth field.
func (r *mutationResolver) CreateHealth(ctx context.Context, patientsAllergies []string, patientsIllness []string, patientsPrimaryDoctor string, patientsTreatments []string) (*model.Health, error) {
	newHealth := bson.M{
		"patientsAllergies":     patientsAllergies,
		"patientsIllness":       patientsIllness,
		"patientsPrimaryDoctor": patientsPrimaryDoctor,
		"patientsTreatments":    patientsTreatments,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Health").InsertOne(ctx, newHealth)
	if err != nil {
		return nil, err
	}
	entity := model.Health{
		ID:                    res.InsertedID.(primitive.ObjectID).Hex(),
		PatientsAllergies:     patientsAllergies,
		PatientsIllness:       patientsIllness,
		PatientsTreatments:    patientsTreatments,
		PatientsPrimaryDoctor: patientsPrimaryDoctor,
	}
	return &entity, err
}

// UpdateHealth is the resolver for the updateHealth field.
func (r *mutationResolver) UpdateHealth(ctx context.Context, id string, patientsAllergies []string, patientsIllness []string, patientsPrimaryDoctor *string, patientsTreatments []string) (*model.Health, error) {
	panic(fmt.Errorf("not implemented: UpdateHealth - updateHealth"))
}

// DeleteHealth is the resolver for the deleteHealth field.
func (r *mutationResolver) DeleteHealth(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Health").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, token string, message string, title string) (*model.Notification, error) {
	newNotification := bson.M{
		"token":   token,
		"message": message,
		"title":   title,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").InsertOne(ctx, newNotification)
	if err != nil {
		return nil, err
	}
	entity := model.Notification{
		ID:      res.InsertedID.(primitive.ObjectID).Hex(),
		Token:   token,
		Message: message,
		Title:   title,
	}
	return &entity, err
}

// UpdateNotification is the resolver for the updateNotification field.
func (r *mutationResolver) UpdateNotification(ctx context.Context, id string, token string, message string, title string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: UpdateNotification - updateNotification"))
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateRdv is the resolver for the createRdv field.
func (r *mutationResolver) CreateRdv(ctx context.Context, idPatient string, doctorID string, startDate int, endDate int) (*model.Rdv, error) {
	newRdv := bson.M{
		"id_patient": idPatient,
		"doctor_id":  doctorID,
		"start_date": startDate,
		"end_date":   endDate,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").InsertOne(ctx, newRdv)
	if err != nil {
		return nil, err
	}
	entity := model.Rdv{
		ID:                res.InsertedID.(primitive.ObjectID).Hex(),
		DoctorID:          doctorID,
		IDPatient:         idPatient,
		StartDate:         startDate,
		EndDate:           endDate,
		CancelationReason: nil,
	}
	return &entity, err
}

// UpdateRdv is the resolver for the updateRdv field.
func (r *mutationResolver) UpdateRdv(ctx context.Context, id string, idPatient *string, doctorID *string, startDate *int, endDate *int, cancelationReason *string) (*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: UpdateRdv - updateRdv"))
}

// DeleteRdv is the resolver for the deleteRdv field.
func (r *mutationResolver) DeleteRdv(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// DeleteSlot is the resolver for the deleteSlot field.
func (r *mutationResolver) DeleteSlot(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Slot").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateDocument is the resolver for the createDocument field.
func (r *mutationResolver) CreateDocument(ctx context.Context, ownerID string, name string, documentType string, category string, isFavorite bool, downloadURL string) (*model.Document, error) {
	newDocument := bson.M{
		"owner_id":      ownerID,
		"name":          name,
		"document_type": documentType,
		"category":      category,
		"is_favorite":   isFavorite,
		"download_url":  downloadURL,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").InsertOne(ctx, newDocument)
	if err != nil {
		return nil, err
	}
	entity := model.Document{
		ID:           res.InsertedID.(primitive.ObjectID).Hex(),
		OwnerID:      ownerID,
		Name:         name,
		DocumentType: model.DocumentType(documentType),
		Category:     model.Category(category),
		IsFavorite:   isFavorite,
		DownloadURL:  downloadURL,
	}
	return &entity, err
}

// UpdateDocument is the resolver for the updateDocument field.
func (r *mutationResolver) UpdateDocument(ctx context.Context, id string, name *string, isFavorite *bool) (*model.Document, error) {
	panic(fmt.Errorf("not implemented: UpdateDocument - updateDocument"))
}

// DeleteDocument is the resolver for the deleteDocument field.
func (r *mutationResolver) DeleteDocument(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteChir is the resolver for the createAnteChir field.
func (r *mutationResolver) CreateAnteChir(ctx context.Context, name string, localisation string, inducedSymptoms []string) (*model.AnteChir, error) {
	newAnteChir := bson.M{
		"name":             name,
		"localisation":     localisation,
		"induced_symptoms": inducedSymptoms,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").InsertOne(ctx, newAnteChir)
	if err != nil {
		return nil, err
	}
	entity := model.AnteChir{
		ID:              res.InsertedID.(primitive.ObjectID).Hex(),
		Name:            name,
		Localisation:    localisation,
		InducedSymptoms: inducedSymptoms,
	}
	return &entity, err
}

// UpdateAnteChir is the resolver for the updateAnteChir field.
func (r *mutationResolver) UpdateAnteChir(ctx context.Context, id string, name *string, localisation *string, inducedSymptoms []string) (*model.AnteChir, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteChir - updateAnteChir"))
}

// DeleteAnteChir is the resolver for the deleteAnteChir field.
func (r *mutationResolver) DeleteAnteChir(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteDisease is the resolver for the createAnteDisease field.
func (r *mutationResolver) CreateAnteDisease(ctx context.Context, name string, chronicity float64, chir *string, treatment []string, symptoms []string) (*model.AnteDisease, error) {
	newAnteDisease := bson.M{
		"name":       name,
		"chronicity": chronicity,
		"chir":       chir,
		"treatment":  treatment,
		"symptoms":   symptoms,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").InsertOne(ctx, newAnteDisease)
	if err != nil {
		return nil, err
	}
	entity := model.AnteDisease{
		ID:         res.InsertedID.(primitive.ObjectID).Hex(),
		Name:       name,
		Chronicity: chronicity,
		Chir:       chir,
		Treatment:  treatment,
		Symptoms:   symptoms,
	}
	return &entity, err
}

// UpdateAnteDisease is the resolver for the updateAnteDisease field.
func (r *mutationResolver) UpdateAnteDisease(ctx context.Context, id string, name *string, chronicity *float64, chir *string, treatment []string, symptoms []string) (*model.AnteDisease, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteDisease - updateAnteDisease"))
}

// DeleteAnteDisease is the resolver for the deleteAnteDisease field.
func (r *mutationResolver) DeleteAnteDisease(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAnteFamily is the resolver for the createAnteFamily field.
func (r *mutationResolver) CreateAnteFamily(ctx context.Context, name string, disease []string) (*model.AnteFamily, error) {
	newAnteFamily := bson.M{
		"name":    name,
		"disease": disease,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").InsertOne(ctx, newAnteFamily)
	if err != nil {
		return nil, err
	}
	entity := model.AnteFamily{
		ID:      res.InsertedID.(primitive.ObjectID).Hex(),
		Name:    "",
		Disease: disease,
	}
	return &entity, err
}

// UpdateAnteFamily is the resolver for the updateAnteFamily field.
func (r *mutationResolver) UpdateAnteFamily(ctx context.Context, id string, name *string, disease []string) (*model.AnteFamily, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteFamily - updateAnteFamily"))
}

// DeleteAnteFamily is the resolver for the deleteAnteFamily field.
func (r *mutationResolver) DeleteAnteFamily(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateTreatment is the resolver for the createTreatment field.
func (r *mutationResolver) CreateTreatment(ctx context.Context, name string, disease string, symptoms []string, sideEffects []string) (*model.Treatment, error) {
	newTreatment := bson.M{
		"name":         name,
		"disease":      disease,
		"symptoms":     symptoms,
		"side_effects": sideEffects,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").InsertOne(ctx, newTreatment)
	if err != nil {
		return nil, err
	}
	entity := model.Treatment{
		ID:          res.InsertedID.(primitive.ObjectID).Hex(),
		Name:        name,
		Disease:     disease,
		Symptoms:    symptoms,
		SideEffects: sideEffects,
	}
	return &entity, err
}

// UpdateTreatment is the resolver for the updateTreatment field.
func (r *mutationResolver) UpdateTreatment(ctx context.Context, id string, name *string, disease *string, symptoms []string, sideEffects []string) (*model.Treatment, error) {
	panic(fmt.Errorf("not implemented: UpdateTreatment - updateTreatment"))
}

// DeleteTreatment is the resolver for the deleteTreatment field.
func (r *mutationResolver) DeleteTreatment(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// CreateAlert is the resolver for the createAlert field.
func (r *mutationResolver) CreateAlert(ctx context.Context, name string, sex *string, height *int, weight *int, symptoms []string, comment string) (*model.Alert, error) {
	newAlert := bson.M{
		"name":     name,
		"sex":      sex,
		"height":   height,
		"weight":   weight,
		"symptoms": symptoms,
		"comment":  comment,
	}

	res, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").InsertOne(ctx, newAlert)
	if err != nil {
		return nil, err
	}
	entity := model.Alert{
		ID:       res.InsertedID.(primitive.ObjectID).Hex(),
		Name:     name,
		Sex:      sex,
		Height:   height,
		Weight:   weight,
		Symptoms: symptoms,
		Comment:  comment,
	}
	return &entity, err
}

// UpdateAlert is the resolver for the updateAlert field.
func (r *mutationResolver) UpdateAlert(ctx context.Context, id string, name *string, sex *string, height *int, weight *int, symptoms []string, comment *string) (*model.Alert, error) {
	panic(fmt.Errorf("not implemented: UpdateAlert - updateAlert"))
}

// DeleteAlert is the resolver for the deleteAlert field.
func (r *mutationResolver) DeleteAlert(ctx context.Context, id string) (*bool, error) {
	objId, err := primitive.ObjectIDFromHex(id)
	resp := false
	if err != nil {
		return &resp, err
	}
	filter := bson.M{"_id": objId}
	_, err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").DeleteOne(ctx, filter)
	if err != nil {
		return &resp, err
	}
	resp = true
	return &resp, err
}

// GetPatients is the resolver for the getPatients field.
func (r *queryResolver) GetPatients(ctx context.Context) ([]*model.Patient, error) {
	filter := bson.D{}
	var results []*model.Patient

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetPatientByID is the resolver for the getPatientById field.
func (r *queryResolver) GetPatientByID(ctx context.Context, id string) (*model.Patient, error) {
	var result model.Patient
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientByEmail is the resolver for the getPatientByEmail field.
func (r *queryResolver) GetPatientByEmail(ctx context.Context, email string) (*model.Patient, error) {
	var result model.Patient

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Patient").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDoctors is the resolver for the getDoctors field.
func (r *queryResolver) GetDoctors(ctx context.Context) ([]*model.Doctor, error) {
	filter := bson.D{}
	var results []*model.Doctor

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDoctorByID is the resolver for the getDoctorById field.
func (r *queryResolver) GetDoctorByID(ctx context.Context, id string) (*model.Doctor, error) {
	var result model.Doctor
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDoctorByEmail is the resolver for the getDoctorByEmail field.
func (r *queryResolver) GetDoctorByEmail(ctx context.Context, email string) (*model.Doctor, error) {
	var result model.Doctor

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Doctor").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAdmins is the resolver for the getAdmins field.
func (r *queryResolver) GetAdmins(ctx context.Context) ([]*model.Admin, error) {
	filter := bson.D{}
	var results []*model.Admin

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAdminByID is the resolver for the getAdminById field.
func (r *queryResolver) GetAdminByID(ctx context.Context, id string) (*model.Admin, error) {
	var result model.Admin
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAdminByEmail is the resolver for the getAdminByEmail field.
func (r *queryResolver) GetAdminByEmail(ctx context.Context, email string) (*model.Admin, error) {
	var result model.Admin

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Admin").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDemoAccounts is the resolver for the getDemoAccounts field.
func (r *queryResolver) GetDemoAccounts(ctx context.Context) ([]*model.DemoAccount, error) {
	filter := bson.D{}
	var results []*model.DemoAccount

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDemoAccountByID is the resolver for the getDemoAccountById field.
func (r *queryResolver) GetDemoAccountByID(ctx context.Context, id string) (*model.DemoAccount, error) {
	var result model.DemoAccount
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDemoAccountByEmail is the resolver for the getDemoAccountByEmail field.
func (r *queryResolver) GetDemoAccountByEmail(ctx context.Context, email string) (*model.DemoAccount, error) {
	var result model.DemoAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("DemoAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTestAccounts is the resolver for the getTestAccounts field.
func (r *queryResolver) GetTestAccounts(ctx context.Context) ([]*model.TestAccount, error) {
	filter := bson.D{}
	var results []*model.TestAccount

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetTestAccountByID is the resolver for the getTestAccountById field.
func (r *queryResolver) GetTestAccountByID(ctx context.Context, id string) (*model.TestAccount, error) {
	var result model.TestAccount
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTestAccountByEmail is the resolver for the getTestAccountByEmail field.
func (r *queryResolver) GetTestAccountByEmail(ctx context.Context, email string) (*model.TestAccount, error) {
	var result model.TestAccount

	filter := bson.M{"email": email}

	err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("TestAccount").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSessions is the resolver for the getSessions field.
func (r *queryResolver) GetSessions(ctx context.Context) ([]*model.Session, error) {
	filter := bson.D{}
	var results []*model.Session

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetSessionByID is the resolver for the getSessionById field.
func (r *queryResolver) GetSessionByID(ctx context.Context, id string) (*model.Session, error) {
	var result model.Session
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Session").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSymptomByID is the resolver for the getSymptomById field.
func (r *queryResolver) GetSymptomByID(ctx context.Context, id string) (*model.Symptom, error) {
	var result model.Symptom
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDiseaseByID is the resolver for the getDiseaseById field.
func (r *queryResolver) GetDiseaseByID(ctx context.Context, id string) (*model.Disease, error) {
	var result model.Disease
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetInfos is the resolver for the getInfos field.
func (r *queryResolver) GetInfos(ctx context.Context) ([]*model.Info, error) {
	filter := bson.D{}
	var results []*model.Info

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Info").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetInfoByID is the resolver for the getInfoById field.
func (r *queryResolver) GetInfoByID(ctx context.Context, id string) (*model.Info, error) {
	var result model.Info
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Info").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetSymptoms is the resolver for the getSymptoms field.
func (r *queryResolver) GetSymptoms(ctx context.Context) ([]*model.Symptom, error) {
	filter := bson.D{}
	var results []*model.Symptom

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Symptom").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDiseases is the resolver for the getDiseases field.
func (r *queryResolver) GetDiseases(ctx context.Context) ([]*model.Disease, error) {
	filter := bson.D{}
	var results []*model.Disease

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Disease").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetHealths is the resolver for the getHealths field.
func (r *queryResolver) GetHealths(ctx context.Context) ([]*model.Health, error) {
	filter := bson.D{}
	var results []*model.Health

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Health").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetHealthByID is the resolver for the getHealthById field.
func (r *queryResolver) GetHealthByID(ctx context.Context, id string) (*model.Health, error) {
	var result model.Health
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Health").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context) ([]*model.Notification, error) {
	filter := bson.D{}
	var results []*model.Notification

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetNotificationByID is the resolver for the getNotificationById field.
func (r *queryResolver) GetNotificationByID(ctx context.Context, id string) (*model.Notification, error) {
	var result model.Notification
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Notification").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientRdv is the resolver for the getPatientRdv field.
func (r *queryResolver) GetPatientRdv(ctx context.Context, idPatient string) ([]*model.Rdv, error) {
	var results []*model.Rdv

	filter := bson.M{"id_patient": idPatient}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDoctorRdv is the resolver for the getDoctorRdv field.
func (r *queryResolver) GetDoctorRdv(ctx context.Context, doctorID string) ([]*model.Rdv, error) {
	var results []*model.Rdv

	filter := bson.M{"doctor_id": doctorID}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetRdvByID is the resolver for the getRdvById field.
func (r *queryResolver) GetRdvByID(ctx context.Context, id string) (*model.Rdv, error) {
	var result model.Rdv
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Rdv").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetDocuments is the resolver for the getDocuments field.
func (r *queryResolver) GetDocuments(ctx context.Context) ([]*model.Document, error) {
	filter := bson.D{}
	var results []*model.Document

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetDocumentByID is the resolver for the getDocumentById field.
func (r *queryResolver) GetDocumentByID(ctx context.Context, id string) (*model.Document, error) {
	var result model.Document
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetPatientDocument is the resolver for the getPatientDocument field.
func (r *queryResolver) GetPatientDocument(ctx context.Context, id string) ([]*model.Document, error) {
	var results []*model.Document

	filter := bson.M{"owner_id": id}

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Document").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteChirs is the resolver for the getAnteChirs field.
func (r *queryResolver) GetAnteChirs(ctx context.Context) ([]*model.AnteChir, error) {
	filter := bson.D{}
	var results []*model.AnteChir

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteChirByID is the resolver for the getAnteChirByID field.
func (r *queryResolver) GetAnteChirByID(ctx context.Context, id string) (*model.AnteChir, error) {
	var result model.AnteChir
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteChir").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAnteDiseases is the resolver for the getAnteDiseases field.
func (r *queryResolver) GetAnteDiseases(ctx context.Context) ([]*model.AnteDisease, error) {
	filter := bson.D{}
	var results []*model.AnteDisease

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteDiseaseByID is the resolver for the getAnteDiseaseByID field.
func (r *queryResolver) GetAnteDiseaseByID(ctx context.Context, id string) (*model.AnteDisease, error) {
	var result model.AnteDisease
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteDisease").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAnteFamilies is the resolver for the getAnteFamilies field.
func (r *queryResolver) GetAnteFamilies(ctx context.Context) ([]*model.AnteFamily, error) {
	filter := bson.D{}
	var results []*model.AnteFamily

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAnteFamilyByID is the resolver for the getAnteFamilyByID field.
func (r *queryResolver) GetAnteFamilyByID(ctx context.Context, id string) (*model.AnteFamily, error) {
	var result model.AnteFamily
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("AnteFamily").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetTreatments is the resolver for the getTreatments field.
func (r *queryResolver) GetTreatments(ctx context.Context) ([]*model.Treatment, error) {
	filter := bson.D{}
	var results []*model.Treatment

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetTreatmentByID is the resolver for the getTreatmentByID field.
func (r *queryResolver) GetTreatmentByID(ctx context.Context, id string) (*model.Treatment, error) {
	var result model.Treatment
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Treatment").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// GetAlerts is the resolver for the getAlerts field.
func (r *queryResolver) GetAlerts(ctx context.Context) ([]*model.Alert, error) {
	filter := bson.D{}
	var results []*model.Alert

	cursor, err := r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// GetAlertByID is the resolver for the getAlertById field.
func (r *queryResolver) GetAlertByID(ctx context.Context, id string) (*model.Alert, error) {
	var result model.Alert
	objId, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": objId}

	err = r.Db.Client.Database(os.Getenv("DATABASE_NAME")).Collection("Alert").FindOne(ctx, filter).Decode(&result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
