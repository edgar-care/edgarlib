package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/edgar-care/edgarlib/graphql/server/model"
)

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, email string, password string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: CreatePatient - createPatient"))
}

// UpdatePatient is the resolver for the updatePatient field.
func (r *mutationResolver) UpdatePatient(ctx context.Context, id string, email *string, password *string, onboardingInfoID *string, onboardingHealthID *string, rendezVousIds []*string, documentIds []*string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: UpdatePatient - updatePatient"))
}

// DeletePatient is the resolver for the deletePatient field.
func (r *mutationResolver) DeletePatient(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeletePatient - deletePatient"))
}

// CreateDoctor is the resolver for the createDoctor field.
func (r *mutationResolver) CreateDoctor(ctx context.Context, email string, password string) (*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: CreateDoctor - createDoctor"))
}

// UpdateDoctor is the resolver for the updateDoctor field.
func (r *mutationResolver) UpdateDoctor(ctx context.Context, id string, email *string, password *string, rendezVousIds []*string, patientIds []*string) (*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: UpdateDoctor - updateDoctor"))
}

// DeleteDoctor is the resolver for the deleteDoctor field.
func (r *mutationResolver) DeleteDoctor(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDoctor - deleteDoctor"))
}

// CreateAdmin is the resolver for the createAdmin field.
func (r *mutationResolver) CreateAdmin(ctx context.Context, email string, password string, name string, lastName string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: CreateAdmin - createAdmin"))
}

// UpdateAdmin is the resolver for the updateAdmin field.
func (r *mutationResolver) UpdateAdmin(ctx context.Context, id string, email *string, password *string, name *string, lastName *string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: UpdateAdmin - updateAdmin"))
}

// DeleteAdmin is the resolver for the deleteAdmin field.
func (r *mutationResolver) DeleteAdmin(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAdmin - deleteAdmin"))
}

// CreateDemoAccount is the resolver for the createDemoAccount field.
func (r *mutationResolver) CreateDemoAccount(ctx context.Context, email string, password string) (*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: CreateDemoAccount - createDemoAccount"))
}

// UpdateDemoAccount is the resolver for the updateDemoAccount field.
func (r *mutationResolver) UpdateDemoAccount(ctx context.Context, id string, email *string, password *string) (*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: UpdateDemoAccount - updateDemoAccount"))
}

// DeleteDemoAccount is the resolver for the deleteDemoAccount field.
func (r *mutationResolver) DeleteDemoAccount(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDemoAccount - deleteDemoAccount"))
}

// CreateTestAccount is the resolver for the createTestAccount field.
func (r *mutationResolver) CreateTestAccount(ctx context.Context, email string, password string) (*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: CreateTestAccount - createTestAccount"))
}

// UpdateTestAccount is the resolver for the updateTestAccount field.
func (r *mutationResolver) UpdateTestAccount(ctx context.Context, id string, email *string, password *string) (*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: UpdateTestAccount - updateTestAccount"))
}

// DeleteTestAccount is the resolver for the deleteTestAccount field.
func (r *mutationResolver) DeleteTestAccount(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTestAccount - deleteTestAccount"))
}

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, symptoms []string, age int, height int, weight int, sex string, lastQuestion string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: CreateSession - createSession"))
}

// UpdateSession is the resolver for the updateSession field.
func (r *mutationResolver) UpdateSession(ctx context.Context, id string, symptoms []string, age *int, height *int, weight *int, sex *string, lastQuestion *string, logs []*model.LogsInput, alerts []string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: UpdateSession - updateSession"))
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSession - deleteSession"))
}

// CreateSymptom is the resolver for the createSymptom field.
func (r *mutationResolver) CreateSymptom(ctx context.Context, code string, name string, location *string, duration *int, acute *int, subacute *int, chronic *int, symptom []string, advice *string, question string) (*model.Symptom, error) {
	panic(fmt.Errorf("not implemented: CreateSymptom - createSymptom"))
}

// UpdateSymptom is the resolver for the updateSymptom field.
func (r *mutationResolver) UpdateSymptom(ctx context.Context, id string, code *string, name *string, location *string, duration *int, acute *int, subacute *int, chronic *int, symptom []string, advice *string, question *string) (*model.Symptom, error) {
	panic(fmt.Errorf("not implemented: UpdateSymptom - updateSymptom"))
}

// DeleteSymptom is the resolver for the deleteSymptom field.
func (r *mutationResolver) DeleteSymptom(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSymptom - deleteSymptom"))
}

// CreateDisease is the resolver for the createDisease field.
func (r *mutationResolver) CreateDisease(ctx context.Context, code string, name string, symptoms []string, symptomsAcute []*model.SymptomWeightInput, symptomsSubacute []*model.SymptomWeightInput, symptomsChronic []*model.SymptomWeightInput, advice *string) (*model.Disease, error) {
	panic(fmt.Errorf("not implemented: CreateDisease - createDisease"))
}

// UpdateDisease is the resolver for the updateDisease field.
func (r *mutationResolver) UpdateDisease(ctx context.Context, id string, code *string, name *string, symptoms []string, symptomsAcute []*model.SymptomWeightInput, symptomsSubacute []*model.SymptomWeightInput, symptomsChronic []*model.SymptomWeightInput, advice *string) (*model.Disease, error) {
	panic(fmt.Errorf("not implemented: UpdateDisease - updateDisease"))
}

// DeleteDisease is the resolver for the deleteDisease field.
func (r *mutationResolver) DeleteDisease(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDisease - deleteDisease"))
}

// CreateInfo is the resolver for the createInfo field.
func (r *mutationResolver) CreateInfo(ctx context.Context, name string, birthdate string, height int, weight int, sex string, surname string) (*model.Info, error) {
	panic(fmt.Errorf("not implemented: CreateInfo - createInfo"))
}

// UpdateInfo is the resolver for the updateInfo field.
func (r *mutationResolver) UpdateInfo(ctx context.Context, id string, name *string, birthdate *string, height *int, weight *int, sex *string, surname *string) (*model.Info, error) {
	panic(fmt.Errorf("not implemented: UpdateInfo - updateInfo"))
}

// DeleteInfo is the resolver for the deleteInfo field.
func (r *mutationResolver) DeleteInfo(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteInfo - deleteInfo"))
}

// CreateHealth is the resolver for the createHealth field.
func (r *mutationResolver) CreateHealth(ctx context.Context, patientsAllergies []string, patientsIllness []string, patientsPrimaryDoctor string, patientsTreatments []string) (*model.Health, error) {
	panic(fmt.Errorf("not implemented: CreateHealth - createHealth"))
}

// UpdateHealth is the resolver for the updateHealth field.
func (r *mutationResolver) UpdateHealth(ctx context.Context, id string, patientsAllergies []string, patientsIllness []string, patientsPrimaryDoctor *string, patientsTreatments []string) (*model.Health, error) {
	panic(fmt.Errorf("not implemented: UpdateHealth - updateHealth"))
}

// DeleteHealth is the resolver for the deleteHealth field.
func (r *mutationResolver) DeleteHealth(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteHealth - deleteHealth"))
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, token string, message string, title string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: CreateNotification - createNotification"))
}

// UpdateNotification is the resolver for the updateNotification field.
func (r *mutationResolver) UpdateNotification(ctx context.Context, id string, token string, message string, title string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: UpdateNotification - updateNotification"))
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteNotification - deleteNotification"))
}

// CreateRdv is the resolver for the createRdv field.
func (r *mutationResolver) CreateRdv(ctx context.Context, idPatient string, doctorID string, startDate int, endDate int) (*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: CreateRdv - createRdv"))
}

// UpdateRdv is the resolver for the updateRdv field.
func (r *mutationResolver) UpdateRdv(ctx context.Context, id string, idPatient *string, doctorID *string, startDate *int, endDate *int, cancelationReason *string) (*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: UpdateRdv - updateRdv"))
}

// DeleteRdv is the resolver for the deleteRdv field.
func (r *mutationResolver) DeleteRdv(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRdv - deleteRdv"))
}

// DeleteSlot is the resolver for the deleteSlot field.
func (r *mutationResolver) DeleteSlot(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSlot - deleteSlot"))
}

// CreateDocument is the resolver for the createDocument field.
func (r *mutationResolver) CreateDocument(ctx context.Context, ownerID string, name string, documentType string, category string, isFavorite bool, downloadURL string) (*model.Document, error) {
	panic(fmt.Errorf("not implemented: CreateDocument - createDocument"))
}

// UpdateDocument is the resolver for the updateDocument field.
func (r *mutationResolver) UpdateDocument(ctx context.Context, id string, name *string, isFavorite *bool) (*model.Document, error) {
	panic(fmt.Errorf("not implemented: UpdateDocument - updateDocument"))
}

// DeleteDocument is the resolver for the deleteDocument field.
func (r *mutationResolver) DeleteDocument(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDocument - deleteDocument"))
}

// CreateAnteChir is the resolver for the createAnteChir field.
func (r *mutationResolver) CreateAnteChir(ctx context.Context, name string, localisation string, inducedSymptoms []string) (*model.AnteChir, error) {
	panic(fmt.Errorf("not implemented: CreateAnteChir - createAnteChir"))
}

// UpdateAnteChir is the resolver for the updateAnteChir field.
func (r *mutationResolver) UpdateAnteChir(ctx context.Context, id string, name *string, localisation *string, inducedSymptoms []string) (*model.AnteChir, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteChir - updateAnteChir"))
}

// DeleteAnteChir is the resolver for the deleteAnteChir field.
func (r *mutationResolver) DeleteAnteChir(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAnteChir - deleteAnteChir"))
}

// CreateAnteDisease is the resolver for the createAnteDisease field.
func (r *mutationResolver) CreateAnteDisease(ctx context.Context, name string, chronicity float64, chir *string, treatment []string, symptoms []string) (*model.AnteDisease, error) {
	panic(fmt.Errorf("not implemented: CreateAnteDisease - createAnteDisease"))
}

// UpdateAnteDisease is the resolver for the updateAnteDisease field.
func (r *mutationResolver) UpdateAnteDisease(ctx context.Context, id string, name *string, chronicity *float64, chir *string, treatment []string, symptoms []string) (*model.AnteDisease, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteDisease - updateAnteDisease"))
}

// DeleteAnteDisease is the resolver for the deleteAnteDisease field.
func (r *mutationResolver) DeleteAnteDisease(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAnteDisease - deleteAnteDisease"))
}

// CreateAnteFamily is the resolver for the createAnteFamily field.
func (r *mutationResolver) CreateAnteFamily(ctx context.Context, name string, disease []string) (*model.AnteFamily, error) {
	panic(fmt.Errorf("not implemented: CreateAnteFamily - createAnteFamily"))
}

// UpdateAnteFamily is the resolver for the updateAnteFamily field.
func (r *mutationResolver) UpdateAnteFamily(ctx context.Context, id string, name *string, disease []string) (*model.AnteFamily, error) {
	panic(fmt.Errorf("not implemented: UpdateAnteFamily - updateAnteFamily"))
}

// DeleteAnteFamily is the resolver for the deleteAnteFamily field.
func (r *mutationResolver) DeleteAnteFamily(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAnteFamily - deleteAnteFamily"))
}

// CreateTreatment is the resolver for the createTreatment field.
func (r *mutationResolver) CreateTreatment(ctx context.Context, name string, disease string, symptoms []string, sideEffects []string) (*model.Treatment, error) {
	panic(fmt.Errorf("not implemented: CreateTreatment - createTreatment"))
}

// UpdateTreatment is the resolver for the updateTreatment field.
func (r *mutationResolver) UpdateTreatment(ctx context.Context, id string, name *string, disease *string, symptoms []string, sideEffects []string) (*model.Treatment, error) {
	panic(fmt.Errorf("not implemented: UpdateTreatment - updateTreatment"))
}

// DeleteTreatment is the resolver for the deleteTreatment field.
func (r *mutationResolver) DeleteTreatment(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTreatment - deleteTreatment"))
}

// CreateAlert is the resolver for the createAlert field.
func (r *mutationResolver) CreateAlert(ctx context.Context, name string, sex *string, height *int, weight *int, symptoms []string, comment string) (*model.Alert, error) {
	panic(fmt.Errorf("not implemented: CreateAlert - createAlert"))
}

// UpdateAlert is the resolver for the updateAlert field.
func (r *mutationResolver) UpdateAlert(ctx context.Context, id string, name *string, sex *string, height *int, weight *int, symptoms []string, comment *string) (*model.Alert, error) {
	panic(fmt.Errorf("not implemented: UpdateAlert - updateAlert"))
}

// DeleteAlert is the resolver for the deleteAlert field.
func (r *mutationResolver) DeleteAlert(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAlert - deleteAlert"))
}

// GetPatients is the resolver for the getPatients field.
func (r *queryResolver) GetPatients(ctx context.Context) ([]*model.Patient, error) {
	panic(fmt.Errorf("not implemented: GetPatients - getPatients"))
}

// GetPatientByID is the resolver for the getPatientById field.
func (r *queryResolver) GetPatientByID(ctx context.Context, id string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: GetPatientByID - getPatientById"))
}

// GetPatientByEmail is the resolver for the getPatientByEmail field.
func (r *queryResolver) GetPatientByEmail(ctx context.Context, email string) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: GetPatientByEmail - getPatientByEmail"))
}

// GetDoctors is the resolver for the getDoctors field.
func (r *queryResolver) GetDoctors(ctx context.Context) ([]*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: GetDoctors - getDoctors"))
}

// GetDoctorByID is the resolver for the getDoctorById field.
func (r *queryResolver) GetDoctorByID(ctx context.Context, id string) (*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: GetDoctorByID - getDoctorById"))
}

// GetDoctorByEmail is the resolver for the getDoctorByEmail field.
func (r *queryResolver) GetDoctorByEmail(ctx context.Context, email string) (*model.Doctor, error) {
	panic(fmt.Errorf("not implemented: GetDoctorByEmail - getDoctorByEmail"))
}

// GetAdmins is the resolver for the getAdmins field.
func (r *queryResolver) GetAdmins(ctx context.Context) ([]*model.Admin, error) {
	panic(fmt.Errorf("not implemented: GetAdmins - getAdmins"))
}

// GetAdminByID is the resolver for the getAdminById field.
func (r *queryResolver) GetAdminByID(ctx context.Context, id string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: GetAdminByID - getAdminById"))
}

// GetAdminByEmail is the resolver for the getAdminByEmail field.
func (r *queryResolver) GetAdminByEmail(ctx context.Context, email string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: GetAdminByEmail - getAdminByEmail"))
}

// GetDemoAccounts is the resolver for the getDemoAccounts field.
func (r *queryResolver) GetDemoAccounts(ctx context.Context) ([]*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: GetDemoAccounts - getDemoAccounts"))
}

// GetDemoAccountByID is the resolver for the getDemoAccountById field.
func (r *queryResolver) GetDemoAccountByID(ctx context.Context, id string) (*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: GetDemoAccountByID - getDemoAccountById"))
}

// GetDemoAccountByEmail is the resolver for the getDemoAccountByEmail field.
func (r *queryResolver) GetDemoAccountByEmail(ctx context.Context, email string) (*model.DemoAccount, error) {
	panic(fmt.Errorf("not implemented: GetDemoAccountByEmail - getDemoAccountByEmail"))
}

// GetTestAccounts is the resolver for the getTestAccounts field.
func (r *queryResolver) GetTestAccounts(ctx context.Context) ([]*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: GetTestAccounts - getTestAccounts"))
}

// GetTestAccountByID is the resolver for the getTestAccountById field.
func (r *queryResolver) GetTestAccountByID(ctx context.Context, id string) (*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: GetTestAccountByID - getTestAccountById"))
}

// GetTestAccountByEmail is the resolver for the getTestAccountByEmail field.
func (r *queryResolver) GetTestAccountByEmail(ctx context.Context, email string) (*model.TestAccount, error) {
	panic(fmt.Errorf("not implemented: GetTestAccountByEmail - getTestAccountByEmail"))
}

// GetSessions is the resolver for the getSessions field.
func (r *queryResolver) GetSessions(ctx context.Context) ([]*model.Session, error) {
	panic(fmt.Errorf("not implemented: GetSessions - getSessions"))
}

// GetSessionByID is the resolver for the getSessionById field.
func (r *queryResolver) GetSessionByID(ctx context.Context, id string) (*model.Session, error) {
	panic(fmt.Errorf("not implemented: GetSessionByID - getSessionById"))
}

// GetSymptomByID is the resolver for the getSymptomById field.
func (r *queryResolver) GetSymptomByID(ctx context.Context, id string) (*model.Symptom, error) {
	panic(fmt.Errorf("not implemented: GetSymptomByID - getSymptomById"))
}

// GetDiseaseByID is the resolver for the getDiseaseById field.
func (r *queryResolver) GetDiseaseByID(ctx context.Context, id string) (*model.Disease, error) {
	panic(fmt.Errorf("not implemented: GetDiseaseByID - getDiseaseById"))
}

// GetInfos is the resolver for the getInfos field.
func (r *queryResolver) GetInfos(ctx context.Context) ([]*model.Info, error) {
	panic(fmt.Errorf("not implemented: GetInfos - getInfos"))
}

// GetInfoByID is the resolver for the getInfoById field.
func (r *queryResolver) GetInfoByID(ctx context.Context, id string) (*model.Info, error) {
	panic(fmt.Errorf("not implemented: GetInfoByID - getInfoById"))
}

// GetSymptoms is the resolver for the getSymptoms field.
func (r *queryResolver) GetSymptoms(ctx context.Context) ([]*model.Symptom, error) {
	panic(fmt.Errorf("not implemented: GetSymptoms - getSymptoms"))
}

// GetDiseases is the resolver for the getDiseases field.
func (r *queryResolver) GetDiseases(ctx context.Context) ([]*model.Disease, error) {
	panic(fmt.Errorf("not implemented: GetDiseases - getDiseases"))
}

// GetHealths is the resolver for the getHealths field.
func (r *queryResolver) GetHealths(ctx context.Context) ([]*model.Health, error) {
	panic(fmt.Errorf("not implemented: GetHealths - getHealths"))
}

// GetHealthByID is the resolver for the getHealthById field.
func (r *queryResolver) GetHealthByID(ctx context.Context, id string) (*model.Health, error) {
	panic(fmt.Errorf("not implemented: GetHealthByID - getHealthById"))
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: GetNotifications - getNotifications"))
}

// GetNotificationByID is the resolver for the getNotificationById field.
func (r *queryResolver) GetNotificationByID(ctx context.Context, id string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: GetNotificationByID - getNotificationById"))
}

// GetPatientRdv is the resolver for the getPatientRdv field.
func (r *queryResolver) GetPatientRdv(ctx context.Context, idPatient string) ([]*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: GetPatientRdv - getPatientRdv"))
}

// GetDoctorRdv is the resolver for the getDoctorRdv field.
func (r *queryResolver) GetDoctorRdv(ctx context.Context, doctorID string) ([]*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: GetDoctorRdv - getDoctorRdv"))
}

// GetRdvByID is the resolver for the getRdvById field.
func (r *queryResolver) GetRdvByID(ctx context.Context, id string) (*model.Rdv, error) {
	panic(fmt.Errorf("not implemented: GetRdvByID - getRdvById"))
}

// GetDocuments is the resolver for the getDocuments field.
func (r *queryResolver) GetDocuments(ctx context.Context) ([]*model.Document, error) {
	panic(fmt.Errorf("not implemented: GetDocuments - getDocuments"))
}

// GetDocumentByID is the resolver for the getDocumentById field.
func (r *queryResolver) GetDocumentByID(ctx context.Context, id string) (*model.Document, error) {
	panic(fmt.Errorf("not implemented: GetDocumentByID - getDocumentById"))
}

// GetPatientDocument is the resolver for the getPatientDocument field.
func (r *queryResolver) GetPatientDocument(ctx context.Context, id string) ([]*model.Document, error) {
	panic(fmt.Errorf("not implemented: GetPatientDocument - getPatientDocument"))
}

// GetAnteChirs is the resolver for the getAnteChirs field.
func (r *queryResolver) GetAnteChirs(ctx context.Context) ([]*model.AnteChir, error) {
	panic(fmt.Errorf("not implemented: GetAnteChirs - getAnteChirs"))
}

// GetAnteChirByID is the resolver for the getAnteChirByID field.
func (r *queryResolver) GetAnteChirByID(ctx context.Context, id string) (*model.AnteChir, error) {
	panic(fmt.Errorf("not implemented: GetAnteChirByID - getAnteChirByID"))
}

// GetAnteDiseases is the resolver for the getAnteDiseases field.
func (r *queryResolver) GetAnteDiseases(ctx context.Context) ([]*model.AnteDisease, error) {
	panic(fmt.Errorf("not implemented: GetAnteDiseases - getAnteDiseases"))
}

// GetAnteDiseaseByID is the resolver for the getAnteDiseaseByID field.
func (r *queryResolver) GetAnteDiseaseByID(ctx context.Context, id string) (*model.AnteDisease, error) {
	panic(fmt.Errorf("not implemented: GetAnteDiseaseByID - getAnteDiseaseByID"))
}

// GetAnteFamilies is the resolver for the getAnteFamilies field.
func (r *queryResolver) GetAnteFamilies(ctx context.Context) ([]*model.AnteFamily, error) {
	panic(fmt.Errorf("not implemented: GetAnteFamilies - getAnteFamilies"))
}

// GetAnteFamilyByID is the resolver for the getAnteFamilyByID field.
func (r *queryResolver) GetAnteFamilyByID(ctx context.Context, id string) (*model.AnteFamily, error) {
	panic(fmt.Errorf("not implemented: GetAnteFamilyByID - getAnteFamilyByID"))
}

// GetTreatments is the resolver for the getTreatments field.
func (r *queryResolver) GetTreatments(ctx context.Context) ([]*model.Treatment, error) {
	panic(fmt.Errorf("not implemented: GetTreatments - getTreatments"))
}

// GetTreatmentByID is the resolver for the getTreatmentByID field.
func (r *queryResolver) GetTreatmentByID(ctx context.Context, id string) (*model.Treatment, error) {
	panic(fmt.Errorf("not implemented: GetTreatmentByID - getTreatmentByID"))
}

// GetAlerts is the resolver for the getAlerts field.
func (r *queryResolver) GetAlerts(ctx context.Context) ([]*model.Alert, error) {
	panic(fmt.Errorf("not implemented: GetAlerts - getAlerts"))
}

// GetAlertByID is the resolver for the getAlertById field.
func (r *queryResolver) GetAlertByID(ctx context.Context, id string) (*model.Alert, error) {
	panic(fmt.Errorf("not implemented: GetAlertByID - getAlertById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
