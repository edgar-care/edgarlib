// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	Street  string `json:"street" bson:"street"`
	ZipCode string `json:"zip_code" bson:"zip_code"`
	Country string `json:"country" bson:"country"`
	City    string `json:"city" bson:"city"`
}

type AddressInput struct {
	Street  string `json:"street" bson:"street"`
	ZipCode string `json:"zip_code" bson:"zip_code"`
	Country string `json:"country" bson:"country"`
	City    string `json:"city" bson:"city"`
}

type Admin struct {
	ID        string `json:"id" bson:"_id"`
	Email     string `json:"email" bson:"email"`
	Password  string `json:"password" bson:"password"`
	Name      string `json:"name" bson:"name"`
	LastName  string `json:"last_name" bson:"last_name"`
	CreatedAt int    `json:"createdAt" bson:"createdAt"`
	UpdatedAt int    `json:"updatedAt" bson:"updatedAt"`
}

type Alert struct {
	ID        string   `json:"id" bson:"_id"`
	Name      string   `json:"name" bson:"name"`
	Sex       *string  `json:"sex,omitempty" bson:"sex"`
	Height    *int     `json:"height,omitempty" bson:"height"`
	Weight    *int     `json:"weight,omitempty" bson:"weight"`
	Symptoms  []string `json:"symptoms" bson:"symptoms"`
	Comment   string   `json:"comment" bson:"comment"`
	CreatedAt int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt int      `json:"updatedAt" bson:"updatedAt"`
}

type AnteChir struct {
	ID              string                `json:"id" bson:"_id"`
	Name            string                `json:"name" bson:"name"`
	InducedSymptoms []*ChirInducedSymptom `json:"induced_symptoms,omitempty" bson:"induced_symptoms"`
	CreatedAt       int                   `json:"createdAt" bson:"createdAt"`
	UpdatedAt       int                   `json:"updatedAt" bson:"updatedAt"`
}

type AnteDisease struct {
	ID            string     `json:"id" bson:"_id"`
	Name          string     `json:"name" bson:"name"`
	Chronicity    float64    `json:"chronicity" bson:"chronicity"`
	SurgeryIds    []string   `json:"surgery_ids,omitempty" bson:"surgery_ids"`
	Symptoms      []string   `json:"symptoms,omitempty" bson:"symptoms"`
	TreatmentIds  []string   `json:"treatment_ids,omitempty" bson:"treatment_ids"`
	StillRelevant bool       `json:"still_relevant" bson:"still_relevant"`
	CreatedAt     int        `json:"createdAt" bson:"createdAt"`
	UpdatedAt     int        `json:"updatedAt" bson:"updatedAt"`
	Symptomsclear []*Symptom `json:"symptomsclear,omitempty" bson:"symptomsclear"`
}

type AnteFamily struct {
	ID        string   `json:"id" bson:"_id"`
	Name      string   `json:"name" bson:"name"`
	Disease   []string `json:"disease" bson:"disease"`
	CreatedAt int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt int      `json:"updatedAt" bson:"updatedAt"`
}

type AutoAnswer struct {
	ID        string         `json:"id" bson:"_id"`
	Name      string         `json:"name" bson:"name"`
	Values    []*string      `json:"values" bson:"values"`
	Type      AutoAnswerType `json:"type" bson:"type"`
	CreatedAt int            `json:"createdAt" bson:"createdAt"`
	UpdatedAt int            `json:"updatedAt" bson:"updatedAt"`
}

type BlackList struct {
	ID        string   `json:"id" bson:"_id"`
	Token     []string `json:"token" bson:"token"`
	CreatedAt int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt int      `json:"updatedAt" bson:"updatedAt"`
}

type Chat struct {
	ID           string              `json:"id" bson:"_id"`
	Participants []*ChatParticipants `json:"participants" bson:"participants"`
	Messages     []*ChatMessages     `json:"messages" bson:"messages"`
	CreatedAt    int                 `json:"createdAt" bson:"createdAt"`
	UpdatedAt    int                 `json:"updatedAt" bson:"updatedAt"`
}

type ChatMessages struct {
	OwnerID    string `json:"owner_id" bson:"owner_id"`
	Message    string `json:"message" bson:"message"`
	SendedTime int    `json:"sended_time" bson:"sended_time"`
}

type ChatMessagesInput struct {
	OwnerID    string `json:"owner_id" bson:"owner_id"`
	Message    string `json:"message" bson:"message"`
	SendedTime int    `json:"sended_time" bson:"sended_time"`
}

type ChatParticipants struct {
	ParticipantID string `json:"participant_id" bson:"participant_id"`
	LastSeen      int    `json:"last_seen" bson:"last_seen"`
}

type ChatParticipantsInput struct {
	ParticipantID string `json:"participant_id" bson:"participant_id"`
	LastSeen      int    `json:"last_seen" bson:"last_seen"`
}

type ChirInducedSymptom struct {
	Symptom string  `json:"symptom" bson:"symptom"`
	Factor  float64 `json:"factor" bson:"factor"`
}

type ChirInducedSymptomInput struct {
	Symptom string  `json:"symptom" bson:"symptom"`
	Factor  float64 `json:"factor" bson:"factor"`
}

type CreateAdminInput struct {
	Email    string `json:"email" bson:"email"`
	Password string `json:"password" bson:"password"`
	Name     string `json:"name" bson:"name"`
	LastName string `json:"last_name" bson:"last_name"`
}

type CreateAlertInput struct {
	Name     string   `json:"name" bson:"name"`
	Sex      *string  `json:"sex,omitempty" bson:"sex"`
	Height   *int     `json:"height,omitempty" bson:"height"`
	Weight   *int     `json:"weight,omitempty" bson:"weight"`
	Symptoms []string `json:"symptoms" bson:"symptoms"`
	Comment  string   `json:"comment" bson:"comment"`
}

type CreateAnteChirInput struct {
	Name            string                     `json:"name" bson:"name"`
	InducedSymptoms []*ChirInducedSymptomInput `json:"induced_symptoms,omitempty" bson:"induced_symptoms"`
}

type CreateAnteDiseaseInput struct {
	Name          string   `json:"name" bson:"name"`
	Chronicity    *float64 `json:"chronicity,omitempty" bson:"chronicity"`
	SurgeryIds    []string `json:"surgery_ids,omitempty" bson:"surgery_ids"`
	Symptoms      []string `json:"symptoms,omitempty" bson:"symptoms"`
	TreatmentIds  []string `json:"treatment_ids,omitempty" bson:"treatment_ids"`
	StillRelevant bool     `json:"still_relevant" bson:"still_relevant"`
}

type CreateAnteFamilyInput struct {
	Name    string   `json:"name" bson:"name"`
	Disease []string `json:"disease" bson:"disease"`
}

type CreateAutoAnswerInput struct {
	Name   string         `json:"name" bson:"name"`
	Values []*string      `json:"values" bson:"values"`
	Type   AutoAnswerType `json:"type" bson:"type"`
}

type CreateBlackListInput struct {
	Token []string `json:"token" bson:"token"`
}

type CreateChatInput struct {
	Participants []*ChatParticipantsInput `json:"participants" bson:"participants"`
	Messages     []*ChatMessagesInput     `json:"messages" bson:"messages"`
}

type CreateDeviceConnectInput struct {
	DeviceType  string `json:"device_type" bson:"device_type"`
	Browser     string `json:"browser" bson:"browser"`
	IPAddress   string `json:"ip_address" bson:"ip_address"`
	City        string `json:"city" bson:"city"`
	Country     string `json:"country" bson:"country"`
	Date        int    `json:"date" bson:"date"`
	TrustDevice bool   `json:"trust_device" bson:"trust_device"`
}

type CreateDiseaseInput struct {
	Code             string                 `json:"code" bson:"code"`
	Name             string                 `json:"name" bson:"name"`
	Symptoms         []string               `json:"symptoms" bson:"symptoms"`
	SymptomsWeight   []*SymptomsWeightInput `json:"symptoms_weight,omitempty" bson:"symptoms_weight"`
	OverweightFactor float64                `json:"overweight_factor" bson:"overweight_factor"`
	HeredityFactor   float64                `json:"heredity_factor" bson:"heredity_factor"`
	Advice           *string                `json:"advice,omitempty" bson:"advice"`
}

type CreateDoctorInput struct {
	Email     string        `json:"email" bson:"email"`
	Password  string        `json:"password" bson:"password"`
	Name      string        `json:"name" bson:"name"`
	Firstname string        `json:"firstname" bson:"firstname"`
	Address   *AddressInput `json:"address" bson:"address"`
	Status    bool          `json:"status" bson:"status"`
}

type CreateDocumentInput struct {
	OwnerID      string `json:"owner_id" bson:"owner_id"`
	Name         string `json:"name" bson:"name"`
	DocumentType string `json:"document_type" bson:"document_type"`
	Category     string `json:"category" bson:"category"`
	IsFavorite   bool   `json:"is_favorite" bson:"is_favorite"`
	DownloadURL  string `json:"download_url" bson:"download_url"`
	UploaderID   string `json:"uploader_id" bson:"uploader_id"`
}

type CreateDoubleAuthInput struct {
	Methods       []string `json:"methods" bson:"methods"`
	Secret        string   `json:"secret" bson:"secret"`
	Code          string   `json:"code" bson:"code"`
	TrustDeviceID []string `json:"trust_device_id,omitempty" bson:"trust_device_id"`
}

type CreateMedicalFolderInput struct {
	Name                   string   `json:"name" bson:"name"`
	Firstname              string   `json:"firstname" bson:"firstname"`
	Birthdate              int      `json:"birthdate" bson:"birthdate"`
	Sex                    string   `json:"sex" bson:"sex"`
	Height                 int      `json:"height" bson:"height"`
	Weight                 int      `json:"weight" bson:"weight"`
	PrimaryDoctorID        string   `json:"primary_doctor_id" bson:"primary_doctor_id"`
	AntecedentDiseaseIds   []string `json:"antecedent_disease_ids,omitempty" bson:"antecedent_disease_ids"`
	OnboardingStatus       string   `json:"onboarding_status" bson:"onboarding_status"`
	FamilyMembersMedInfoID []string `json:"family_members_med_info_id" bson:"family_members_med_info_id"`
}

type CreateMedicineInput struct {
	Dci             string        `json:"dci" bson:"dci"`
	TargetDiseases  []string      `json:"target_diseases" bson:"target_diseases"`
	TreatedSymptoms []string      `json:"treated_symptoms" bson:"treated_symptoms"`
	SideEffects     []string      `json:"side_effects" bson:"side_effects"`
	Dosage          int           `json:"dosage" bson:"dosage"`
	DosageUnit      UnitEnum      `json:"dosage_unit" bson:"dosage_unit"`
	Container       ContainerEnum `json:"container" bson:"container"`
	Name            string        `json:"name" bson:"name"`
	DosageForm      FormEnum      `json:"dosage_form" bson:"dosage_form"`
}

type CreateNlpReportInput struct {
	Version         int                     `json:"version" bson:"version"`
	InputSymptoms   []string                `json:"input_symptoms" bson:"input_symptoms"`
	InputSentence   string                  `json:"input_sentence" bson:"input_sentence"`
	Output          []*NlpReportOutputInput `json:"output" bson:"output"`
	ComputationTime int                     `json:"computation_time" bson:"computation_time"`
}

type CreateNotificationInput struct {
	Token   string `json:"token" bson:"token"`
	Message string `json:"message" bson:"message"`
	Title   string `json:"title" bson:"title"`
}

type CreateOrdonnanceInput struct {
	CreatedBy string                     `json:"created_by" bson:"created_by"`
	PatientID string                     `json:"patient_id" bson:"patient_id"`
	Medicines []*MedicineOrdonnanceInput `json:"medicines" bson:"medicines"`
}

type CreatePatientInput struct {
	Email               string    `json:"email" bson:"email"`
	Password            string    `json:"password" bson:"password"`
	Status              bool      `json:"status" bson:"status"`
	DeviceConnect       []*string `json:"device_connect,omitempty" bson:"device_connect"`
	DoubleAuthMethodsID *string   `json:"double_auth_methods_id,omitempty" bson:"double_auth_methods_id"`
	TrustDevices        []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type CreateRdvInput struct {
	IDPatient         string            `json:"id_patient" bson:"id_patient"`
	DoctorID          string            `json:"doctor_id" bson:"doctor_id"`
	StartDate         int               `json:"start_date" bson:"start_date"`
	EndDate           int               `json:"end_date" bson:"end_date"`
	AppointmentStatus AppointmentStatus `json:"appointment_status" bson:"appointment_status"`
	SessionID         string            `json:"session_id" bson:"session_id"`
}

type CreateSaveCodeInput struct {
	Code []string `json:"code" bson:"code"`
}

type CreateSessionInput struct {
	Age               int      `json:"age" bson:"age"`
	Height            int      `json:"height" bson:"height"`
	Weight            int      `json:"weight" bson:"weight"`
	Sex               string   `json:"sex" bson:"sex"`
	AnteChirs         []string `json:"ante_chirs" bson:"ante_chirs"`
	AnteDiseases      []string `json:"ante_diseases" bson:"ante_diseases"`
	Medicine          []string `json:"medicine" bson:"medicine"`
	HereditaryDisease []string `json:"hereditary_disease" bson:"hereditary_disease"`
}

type CreateSymptomInput struct {
	Code             string   `json:"code" bson:"code"`
	Name             string   `json:"name" bson:"name"`
	Chronic          *int     `json:"chronic,omitempty" bson:"chronic"`
	Symptom          []string `json:"symptom" bson:"symptom"`
	Advice           *string  `json:"advice,omitempty" bson:"advice"`
	Question         string   `json:"question" bson:"question"`
	QuestionBasic    string   `json:"question_basic" bson:"question_basic"`
	QuestionDuration string   `json:"question_duration" bson:"question_duration"`
	QuestionAnte     string   `json:"question_ante" bson:"question_ante"`
}

type CreateTreatmentInput struct {
	Period     []Period `json:"period" bson:"period"`
	Day        []Day    `json:"day" bson:"day"`
	Quantity   int      `json:"quantity" bson:"quantity"`
	MedicineID string   `json:"medicine_id" bson:"medicine_id"`
	StartDate  int      `json:"start_date" bson:"start_date"`
	EndDate    int      `json:"end_date" bson:"end_date"`
}

type CreateTreatmentsFollowUpInput struct {
	TreatmentID string   `json:"treatment_id" bson:"treatment_id"`
	Date        int      `json:"date" bson:"date"`
	Period      []Period `json:"period" bson:"period"`
}

type DeviceConnect struct {
	ID          string `json:"id" bson:"_id"`
	DeviceType  string `json:"device_type" bson:"device_type"`
	Browser     string `json:"browser" bson:"browser"`
	IPAddress   string `json:"ip_address" bson:"ip_address"`
	City        string `json:"city" bson:"city"`
	Country     string `json:"country" bson:"country"`
	Date        int    `json:"date" bson:"date"`
	TrustDevice bool   `json:"trust_device" bson:"trust_device"`
	CreatedAt   int    `json:"createdAt" bson:"createdAt"`
	UpdatedAt   int    `json:"updatedAt" bson:"updatedAt"`
}

type Disease struct {
	ID               string            `json:"id" bson:"_id"`
	Code             string            `json:"code" bson:"code"`
	Name             string            `json:"name" bson:"name"`
	Symptoms         []string          `json:"symptoms" bson:"symptoms"`
	SymptomsWeight   []*SymptomsWeight `json:"symptoms_weight,omitempty" bson:"symptoms_weight"`
	OverweightFactor float64           `json:"overweight_factor" bson:"overweight_factor"`
	HeredityFactor   float64           `json:"heredity_factor" bson:"heredity_factor"`
	Advice           *string           `json:"advice,omitempty" bson:"advice"`
	CreatedAt        int               `json:"createdAt" bson:"createdAt"`
	UpdatedAt        int               `json:"updatedAt" bson:"updatedAt"`
}

type Doctor struct {
	ID                  string    `json:"id" bson:"_id"`
	Email               string    `json:"email" bson:"email"`
	Password            string    `json:"password" bson:"password"`
	Name                string    `json:"name" bson:"name"`
	Firstname           string    `json:"firstname" bson:"firstname"`
	Address             *Address  `json:"address" bson:"address"`
	RendezVousIds       []*string `json:"rendez_vous_ids,omitempty" bson:"rendez_vous_ids"`
	PatientIds          []*string `json:"patient_ids,omitempty" bson:"patient_ids"`
	ChatIds             []*string `json:"chat_ids,omitempty" bson:"chat_ids"`
	DoubleAuthMethodsID *string   `json:"double_auth_methods_id,omitempty" bson:"double_auth_methods_id"`
	DeviceConnect       []*string `json:"device_connect,omitempty" bson:"device_connect"`
	TrustDevices        []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
	OrdonnanceIds       []*string `json:"ordonnance_ids,omitempty" bson:"ordonnance_ids"`
	Status              bool      `json:"status" bson:"status"`
	CreatedAt           int       `json:"createdAt" bson:"createdAt"`
	UpdatedAt           int       `json:"updatedAt" bson:"updatedAt"`
}

type Document struct {
	ID           string       `json:"id" bson:"_id"`
	OwnerID      string       `json:"owner_id" bson:"owner_id"`
	Name         string       `json:"name" bson:"name"`
	DocumentType DocumentType `json:"document_type" bson:"document_type"`
	Category     Category     `json:"category" bson:"category"`
	IsFavorite   bool         `json:"is_favorite" bson:"is_favorite"`
	DownloadURL  string       `json:"download_url" bson:"download_url"`
	UploaderID   string       `json:"uploader_id" bson:"uploader_id"`
	CreatedAt    int          `json:"createdAt" bson:"createdAt"`
	UpdatedAt    int          `json:"updatedAt" bson:"updatedAt"`
}

type DoubleAuth struct {
	ID            string   `json:"id" bson:"_id"`
	Methods       []string `json:"methods" bson:"methods"`
	Secret        string   `json:"secret" bson:"secret"`
	Code          string   `json:"code" bson:"code"`
	TrustDeviceID []string `json:"trust_device_id" bson:"trust_device_id"`
	CreatedAt     int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt     int      `json:"updatedAt" bson:"updatedAt"`
}

type Logs struct {
	Question string `json:"question" bson:"question"`
	Answer   string `json:"answer" bson:"answer"`
}

type LogsInput struct {
	Question string `json:"question" bson:"question"`
	Answer   string `json:"answer" bson:"answer"`
}

type MedicalAntecedents struct {
	ID            string       `json:"id" bson:"_id"`
	Name          string       `json:"name" bson:"name"`
	Medicines     []*Treatment `json:"medicines" bson:"medicines"`
	StillRelevant bool         `json:"still_relevant" bson:"still_relevant"`
	CreatedAt     int          `json:"createdAt" bson:"createdAt"`
	UpdatedAt     int          `json:"updatedAt" bson:"updatedAt"`
}

type MedicalAntecedentsInput struct {
	Name          string            `json:"name" bson:"name"`
	Medicines     []*TreatmentInput `json:"medicines" bson:"medicines"`
	StillRelevant bool              `json:"still_relevant" bson:"still_relevant"`
}

type MedicalInfo struct {
	ID                     string           `json:"id" bson:"_id"`
	Name                   string           `json:"name" bson:"name"`
	Firstname              string           `json:"firstname" bson:"firstname"`
	Birthdate              int              `json:"birthdate" bson:"birthdate"`
	Sex                    Sex              `json:"sex" bson:"sex"`
	Height                 int              `json:"height" bson:"height"`
	Weight                 int              `json:"weight" bson:"weight"`
	PrimaryDoctorID        string           `json:"primary_doctor_id" bson:"primary_doctor_id"`
	OnboardingStatus       OnboardingStatus `json:"onboarding_status" bson:"onboarding_status"`
	AntecedentDiseaseIds   []string         `json:"antecedent_disease_ids" bson:"antecedent_disease_ids"`
	FamilyMembersMedInfoID []string         `json:"family_members_med_info_id" bson:"family_members_med_info_id"`
	CreatedAt              int              `json:"createdAt" bson:"createdAt"`
	UpdatedAt              int              `json:"updatedAt" bson:"updatedAt"`
}

type Medicine struct {
	ID              string        `json:"id" bson:"_id"`
	Dci             string        `json:"dci" bson:"dci"`
	TargetDiseases  []string      `json:"target_diseases" bson:"target_diseases"`
	TreatedSymptoms []string      `json:"treated_symptoms" bson:"treated_symptoms"`
	SideEffects     []string      `json:"side_effects" bson:"side_effects"`
	Dosage          int           `json:"dosage" bson:"dosage"`
	DosageUnit      UnitEnum      `json:"dosage_unit" bson:"dosage_unit"`
	Container       ContainerEnum `json:"container" bson:"container"`
	Name            string        `json:"name" bson:"name"`
	DosageForm      FormEnum      `json:"dosage_form" bson:"dosage_form"`
	CreatedAt       int           `json:"createdAt" bson:"createdAt"`
	UpdatedAt       int           `json:"updatedAt" bson:"updatedAt"`
	Symptoms        []*Symptom    `json:"symptoms,omitempty" bson:"symptoms"`
}

type MedicineInput struct {
	Dci             string        `json:"dci" bson:"dci"`
	TargetDiseases  []string      `json:"target_diseases" bson:"target_diseases"`
	TreatedSymptoms []string      `json:"treated_symptoms" bson:"treated_symptoms"`
	SideEffects     []string      `json:"side_effects" bson:"side_effects"`
	Dosage          int           `json:"dosage" bson:"dosage"`
	DosageUnit      UnitEnum      `json:"dosage_unit" bson:"dosage_unit"`
	Container       ContainerEnum `json:"container" bson:"container"`
	Name            string        `json:"name" bson:"name"`
	DosageForm      FormEnum      `json:"dosage_form" bson:"dosage_form"`
}

type MedicineOrdonnance struct {
	MedicineID string              `json:"medicine_id" bson:"medicine_id"`
	Qsp        int                 `json:"qsp" bson:"qsp"`
	QspUnit    TimeUnitEnum        `json:"qsp_unit" bson:"qsp_unit"`
	Comment    *string             `json:"comment,omitempty" bson:"comment"`
	Periods    []*PeriodOrdonnance `json:"periods" bson:"periods"`
}

type MedicineOrdonnanceInput struct {
	MedicineID string                   `json:"medicine_id" bson:"medicine_id"`
	Qsp        int                      `json:"qsp" bson:"qsp"`
	QspUnit    TimeUnitEnum             `json:"qsp_unit" bson:"qsp_unit"`
	Comment    *string                  `json:"comment,omitempty" bson:"comment"`
	Periods    []*PeriodOrdonnanceInput `json:"periods" bson:"periods"`
}

type Mutation struct {
}

type NlpReport struct {
	ID              string             `json:"id" bson:"_id"`
	Version         int                `json:"version" bson:"version"`
	InputSymptoms   []string           `json:"input_symptoms" bson:"input_symptoms"`
	InputSentence   string             `json:"input_sentence" bson:"input_sentence"`
	Output          []*NlpReportOutput `json:"output" bson:"output"`
	ComputationTime int                `json:"computation_time" bson:"computation_time"`
	CreatedAt       int                `json:"createdAt" bson:"createdAt"`
	UpdatedAt       int                `json:"updatedAt" bson:"updatedAt"`
}

type NlpReportOutput struct {
	Symptom string `json:"symptom" bson:"symptom"`
	Present *bool  `json:"present,omitempty" bson:"present"`
	Days    *int   `json:"days,omitempty" bson:"days"`
}

type NlpReportOutputInput struct {
	Symptom string `json:"symptom" bson:"symptom"`
	Present *bool  `json:"present,omitempty" bson:"present"`
	Days    *int   `json:"days,omitempty" bson:"days"`
}

type Notification struct {
	ID        string `json:"id" bson:"_id"`
	Token     string `json:"token" bson:"token"`
	Title     string `json:"title" bson:"title"`
	Message   string `json:"message" bson:"message"`
	CreatedAt int    `json:"createdAt" bson:"createdAt"`
	UpdatedAt int    `json:"updatedAt" bson:"updatedAt"`
}

type Options struct {
	Sort   *SortingOptions `json:"sort" bson:"sort"`
	Limit  int             `json:"limit" bson:"limit"`
	Offset int             `json:"offset" bson:"offset"`
}

type Ordonnance struct {
	ID        string                `json:"id" bson:"_id"`
	CreatedBy string                `json:"created_by" bson:"created_by"`
	PatientID string                `json:"patient_id" bson:"patient_id"`
	Medicines []*MedicineOrdonnance `json:"medicines" bson:"medicines"`
	CreatedAt int                   `json:"createdAt" bson:"createdAt"`
	UpdatedAt int                   `json:"updatedAt" bson:"updatedAt"`
}

type Patient struct {
	ID                   string    `json:"id" bson:"_id"`
	Email                string    `json:"email" bson:"email"`
	Password             string    `json:"password" bson:"password"`
	RendezVousIds        []*string `json:"rendez_vous_ids,omitempty" bson:"rendez_vous_ids"`
	MedicalInfoID        *string   `json:"medical_info_id,omitempty" bson:"medical_info_id"`
	DocumentIds          []*string `json:"document_ids,omitempty" bson:"document_ids"`
	TreatmentFollowUpIds []*string `json:"treatment_follow_up_ids,omitempty" bson:"treatment_follow_up_ids"`
	ChatIds              []*string `json:"chat_ids,omitempty" bson:"chat_ids"`
	DoubleAuthMethodsID  *string   `json:"double_auth_methods_id,omitempty" bson:"double_auth_methods_id"`
	DeviceConnect        []*string `json:"device_connect,omitempty" bson:"device_connect"`
	TrustDevices         []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
	Status               bool      `json:"status" bson:"status"`
	CreatedAt            int       `json:"createdAt" bson:"createdAt"`
	UpdatedAt            int       `json:"updatedAt" bson:"updatedAt"`
}

type PeriodOrdonnance struct {
	Quantity       int           `json:"quantity" bson:"quantity"`
	Frequency      int           `json:"frequency" bson:"frequency"`
	FrequencyRatio int           `json:"frequency_ratio" bson:"frequency_ratio"`
	FrequencyUnit  TimeUnitEnum  `json:"frequency_unit" bson:"frequency_unit"`
	PeriodLength   *int          `json:"period_length,omitempty" bson:"period_length"`
	PeriodUnit     *TimeUnitEnum `json:"period_unit,omitempty" bson:"period_unit"`
}

type PeriodOrdonnanceInput struct {
	Quantity       int           `json:"quantity" bson:"quantity"`
	Frequency      int           `json:"frequency" bson:"frequency"`
	FrequencyRatio int           `json:"frequency_ratio" bson:"frequency_ratio"`
	FrequencyUnit  TimeUnitEnum  `json:"frequency_unit" bson:"frequency_unit"`
	PeriodLength   *int          `json:"period_length,omitempty" bson:"period_length"`
	PeriodUnit     *TimeUnitEnum `json:"period_unit,omitempty" bson:"period_unit"`
}

type Query struct {
}

type Rdv struct {
	ID                string            `json:"id" bson:"_id"`
	DoctorID          string            `json:"doctor_id" bson:"doctor_id"`
	IDPatient         string            `json:"id_patient" bson:"id_patient"`
	StartDate         int               `json:"start_date" bson:"start_date"`
	EndDate           int               `json:"end_date" bson:"end_date"`
	CancelationReason *string           `json:"cancelation_reason,omitempty" bson:"cancelation_reason"`
	AppointmentStatus AppointmentStatus `json:"appointment_status" bson:"appointment_status"`
	SessionID         string            `json:"session_id" bson:"session_id"`
	HealthMethod      *string           `json:"health_method,omitempty" bson:"health_method"`
	CreatedAt         int               `json:"createdAt" bson:"createdAt"`
	UpdatedAt         int               `json:"updatedAt" bson:"updatedAt"`
}

type SaveCode struct {
	ID        string   `json:"id" bson:"_id"`
	Code      []string `json:"code" bson:"code"`
	CreatedAt int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt int      `json:"updatedAt" bson:"updatedAt"`
}

type Session struct {
	ID                string             `json:"id" bson:"_id"`
	Diseases          []*SessionDiseases `json:"diseases" bson:"diseases"`
	Symptoms          []*SessionSymptom  `json:"symptoms" bson:"symptoms"`
	Age               int                `json:"age" bson:"age"`
	Height            int                `json:"height" bson:"height"`
	Weight            int                `json:"weight" bson:"weight"`
	Sex               string             `json:"sex" bson:"sex"`
	AnteChirs         []string           `json:"ante_chirs" bson:"ante_chirs"`
	AnteDiseases      []string           `json:"ante_diseases" bson:"ante_diseases"`
	Medicine          []string           `json:"medicine" bson:"medicine"`
	LastQuestion      string             `json:"last_question" bson:"last_question"`
	Logs              []*Logs            `json:"logs" bson:"logs"`
	HereditaryDisease []string           `json:"hereditary_disease" bson:"hereditary_disease"`
	Alerts            []string           `json:"alerts" bson:"alerts"`
	CreatedAt         int                `json:"createdAt" bson:"createdAt"`
	UpdatedAt         int                `json:"updatedAt" bson:"updatedAt"`
}

type SessionDiseases struct {
	Name            string  `json:"name" bson:"name"`
	Presence        float64 `json:"presence" bson:"presence"`
	UnknownPresence float64 `json:"unknown_presence" bson:"unknown_presence"`
}

type SessionDiseasesInput struct {
	Name            string  `json:"name" bson:"name"`
	Presence        float64 `json:"presence" bson:"presence"`
	UnknownPresence float64 `json:"unknown_presence" bson:"unknown_presence"`
}

type SessionSymptom struct {
	Name     string   `json:"name" bson:"name"`
	Presence int      `json:"presence" bson:"presence"`
	Duration *int     `json:"duration,omitempty" bson:"duration"`
	Treated  []string `json:"treated,omitempty" bson:"treated"`
}

type SessionSymptomInput struct {
	Name     string   `json:"name" bson:"name"`
	Presence int      `json:"presence" bson:"presence"`
	Duration *int     `json:"duration,omitempty" bson:"duration"`
	Treated  []string `json:"treated,omitempty" bson:"treated"`
}

type SortingOptions struct {
	Order SortOrder `json:"order" bson:"order"`
	Key   string    `json:"key" bson:"key"`
}

type Symptom struct {
	ID               string   `json:"id" bson:"_id"`
	Code             string   `json:"code" bson:"code"`
	Name             string   `json:"name" bson:"name"`
	Chronic          *int     `json:"chronic,omitempty" bson:"chronic"`
	Symptom          []string `json:"symptom" bson:"symptom"`
	Advice           *string  `json:"advice,omitempty" bson:"advice"`
	Question         string   `json:"question" bson:"question"`
	QuestionBasic    string   `json:"question_basic" bson:"question_basic"`
	QuestionDuration string   `json:"question_duration" bson:"question_duration"`
	QuestionAnte     string   `json:"question_ante" bson:"question_ante"`
	CreatedAt        int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt        int      `json:"updatedAt" bson:"updatedAt"`
}

type SymptomsWeight struct {
	Symptom string  `json:"symptom" bson:"symptom"`
	Value   float64 `json:"value" bson:"value"`
	Chronic bool    `json:"chronic" bson:"chronic"`
}

type SymptomsWeightInput struct {
	Symptom string  `json:"symptom" bson:"symptom"`
	Value   float64 `json:"value" bson:"value"`
	Chronic bool    `json:"chronic" bson:"chronic"`
}

type Treatment struct {
	ID         string   `json:"id" bson:"_id"`
	Period     []Period `json:"period" bson:"period"`
	Day        []Day    `json:"day" bson:"day"`
	Quantity   int      `json:"quantity" bson:"quantity"`
	MedicineID string   `json:"medicine_id" bson:"medicine_id"`
	StartDate  int      `json:"start_date" bson:"start_date"`
	EndDate    int      `json:"end_date" bson:"end_date"`
	CreatedAt  int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt  int      `json:"updatedAt" bson:"updatedAt"`
}

type TreatmentInput struct {
	Period     []*Period `json:"period" bson:"period"`
	Day        []*Day    `json:"day" bson:"day"`
	Quantity   int       `json:"quantity" bson:"quantity"`
	MedicineID string    `json:"medicine_id" bson:"medicine_id"`
	StartDate  int       `json:"start_date" bson:"start_date"`
	EndDate    int       `json:"end_date" bson:"end_date"`
}

type TreatmentsFollowUp struct {
	ID          string   `json:"id" bson:"_id"`
	TreatmentID string   `json:"treatment_id" bson:"treatment_id"`
	Date        int      `json:"date" bson:"date"`
	Period      []Period `json:"period" bson:"period"`
	CreatedAt   int      `json:"createdAt" bson:"createdAt"`
	UpdatedAt   int      `json:"updatedAt" bson:"updatedAt"`
}

type UpdateAccountMedicalFolder struct {
	AntecedentDiseaseIds []*string `json:"antecedent_disease_ids,omitempty" bson:"antecedent_disease_ids"`
}

type UpdateAdminInput struct {
	Email    *string `json:"email,omitempty" bson:"email"`
	Password *string `json:"password,omitempty" bson:"password"`
	Name     *string `json:"name,omitempty" bson:"name"`
	LastName *string `json:"last_name,omitempty" bson:"last_name"`
}

type UpdateAlertInput struct {
	Name     *string  `json:"name,omitempty" bson:"name"`
	Sex      *string  `json:"sex,omitempty" bson:"sex"`
	Height   *int     `json:"height,omitempty" bson:"height"`
	Weight   *int     `json:"weight,omitempty" bson:"weight"`
	Symptoms []string `json:"symptoms,omitempty" bson:"symptoms"`
	Comment  *string  `json:"comment,omitempty" bson:"comment"`
}

type UpdateAnteChirInput struct {
	Name            *string                    `json:"name,omitempty" bson:"name"`
	InducedSymptoms []*ChirInducedSymptomInput `json:"induced_symptoms,omitempty" bson:"induced_symptoms"`
}

type UpdateAnteDiseaseInput struct {
	Name          *string  `json:"name,omitempty" bson:"name"`
	Chronicity    *float64 `json:"chronicity,omitempty" bson:"chronicity"`
	SurgeryIds    []string `json:"surgery_ids,omitempty" bson:"surgery_ids"`
	Symptoms      []string `json:"symptoms,omitempty" bson:"symptoms"`
	TreatmentIds  []string `json:"treatment_ids,omitempty" bson:"treatment_ids"`
	StillRelevant *bool    `json:"still_relevant,omitempty" bson:"still_relevant"`
}

type UpdateAnteFamilyInput struct {
	Name    *string  `json:"name,omitempty" bson:"name"`
	Disease []string `json:"disease,omitempty" bson:"disease"`
}

type UpdateAutoAnswerInput struct {
	Name   *string         `json:"name,omitempty" bson:"name"`
	Values []*string       `json:"values,omitempty" bson:"values"`
	Type   *AutoAnswerType `json:"type,omitempty" bson:"type"`
}

type UpdateBlackListInput struct {
	Token []string `json:"token,omitempty" bson:"token"`
}

type UpdateChatInput struct {
	Participants []*ChatParticipantsInput `json:"participants,omitempty" bson:"participants"`
	Messages     []*ChatMessagesInput     `json:"messages,omitempty" bson:"messages"`
}

type UpdateDeviceConnectInput struct {
	DeviceType  *string `json:"device_type,omitempty" bson:"device_type"`
	Browser     *string `json:"browser,omitempty" bson:"browser"`
	IPAddress   *string `json:"ip_address,omitempty" bson:"ip_address"`
	City        *string `json:"city,omitempty" bson:"city"`
	Country     *string `json:"country,omitempty" bson:"country"`
	Date        *int    `json:"date,omitempty" bson:"date"`
	TrustDevice *bool   `json:"trust_device,omitempty" bson:"trust_device"`
}

type UpdateDiseaseInput struct {
	Code             *string                `json:"code,omitempty" bson:"code"`
	Name             *string                `json:"name,omitempty" bson:"name"`
	Symptoms         []string               `json:"symptoms,omitempty" bson:"symptoms"`
	SymptomsWeight   []*SymptomsWeightInput `json:"symptoms_weight,omitempty" bson:"symptoms_weight"`
	OverweightFactor *float64               `json:"overweight_factor,omitempty" bson:"overweight_factor"`
	HeredityFactor   *float64               `json:"heredity_factor,omitempty" bson:"heredity_factor"`
	Advice           *string                `json:"advice,omitempty" bson:"advice"`
}

type UpdateDoctorInput struct {
	Email               *string       `json:"email,omitempty" bson:"email"`
	Password            *string       `json:"password,omitempty" bson:"password"`
	Name                *string       `json:"name,omitempty" bson:"name"`
	Firstname           *string       `json:"firstname,omitempty" bson:"firstname"`
	RendezVousIds       []*string     `json:"rendez_vous_ids,omitempty" bson:"rendez_vous_ids"`
	PatientIds          []*string     `json:"patient_ids,omitempty" bson:"patient_ids"`
	Address             *AddressInput `json:"address,omitempty" bson:"address"`
	ChatIds             []*string     `json:"chat_ids,omitempty" bson:"chat_ids"`
	DeviceConnect       []*string     `json:"device_connect,omitempty" bson:"device_connect"`
	DoubleAuthMethodsID *string       `json:"double_auth_methods_id,omitempty" bson:"double_auth_methods_id"`
	TrustDevices        []*string     `json:"trust_devices,omitempty" bson:"trust_devices"`
	OrdonnanceIds       []*string     `json:"ordonnance_ids,omitempty" bson:"ordonnance_ids"`
	Status              *bool         `json:"status,omitempty" bson:"status"`
}

type UpdateDoctorsDeviceConnectInput struct {
	DeviceConnect []*string `json:"device_connect,omitempty" bson:"device_connect"`
	TrustDevices  []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type UpdateDoctorsPatientIDsInput struct {
	PatientIds []*string `json:"patient_ids,omitempty" bson:"patient_ids"`
}

type UpdateDoctorsTrustDeviceInput struct {
	TrustDevices []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type UpdateDocumentInput struct {
	Name       *string `json:"name,omitempty" bson:"name"`
	IsFavorite *bool   `json:"is_favorite,omitempty" bson:"is_favorite"`
}

type UpdateDoubleAuthInput struct {
	Methods       []string `json:"methods,omitempty" bson:"methods"`
	Secret        *string  `json:"secret,omitempty" bson:"secret"`
	Code          *string  `json:"code,omitempty" bson:"code"`
	URL           *string  `json:"url,omitempty" bson:"url"`
	TrustDeviceID []string `json:"trust_device_id,omitempty" bson:"trust_device_id"`
}

type UpdateMedicalFolderInput struct {
	Name                   *string           `json:"name,omitempty" bson:"name"`
	Firstname              *string           `json:"firstname,omitempty" bson:"firstname"`
	Birthdate              *int              `json:"birthdate,omitempty" bson:"birthdate"`
	Sex                    *string           `json:"sex,omitempty" bson:"sex"`
	Height                 *int              `json:"height,omitempty" bson:"height"`
	Weight                 *int              `json:"weight,omitempty" bson:"weight"`
	PrimaryDoctorID        *string           `json:"primary_doctor_id,omitempty" bson:"primary_doctor_id"`
	AntecedentDiseaseIds   []string          `json:"antecedent_disease_ids,omitempty" bson:"antecedent_disease_ids"`
	OnboardingStatus       *OnboardingStatus `json:"onboarding_status,omitempty" bson:"onboarding_status"`
	FamilyMembersMedInfoID []string          `json:"family_members_med_info_id,omitempty" bson:"family_members_med_info_id"`
}

type UpdateMedicineOrdonnanceInput struct {
	MedicineID *string                        `json:"medicine_id,omitempty" bson:"medicine_id"`
	Qsp        *int                           `json:"qsp,omitempty" bson:"qsp"`
	QspUnit    *TimeUnitEnum                  `json:"qsp_unit,omitempty" bson:"qsp_unit"`
	Comment    *string                        `json:"comment,omitempty" bson:"comment"`
	Periods    []*UpdatePeriodOrdonnanceInput `json:"periods,omitempty" bson:"periods"`
}

type UpdateNotificationInput struct {
	Token   string `json:"token" bson:"token"`
	Message string `json:"message" bson:"message"`
	Title   string `json:"title" bson:"title"`
}

type UpdateOrdonnanceInput struct {
	CreatedBy *string                    `json:"created_by,omitempty" bson:"created_by"`
	PatientID *string                    `json:"patient_id,omitempty" bson:"patient_id"`
	Medicines []*MedicineOrdonnanceInput `json:"medicines,omitempty" bson:"medicines"`
}

type UpdatePatientAntediseaseInput struct {
	TreatmentIds []*string `json:"treatment_ids,omitempty" bson:"treatment_ids"`
}

type UpdatePatientFollowTreatmentInput struct {
	TreatmentFollowUpIds []*string `json:"treatment_follow_up_ids,omitempty" bson:"treatment_follow_up_ids"`
}

type UpdatePatientInput struct {
	Email                *string   `json:"email,omitempty" bson:"email"`
	Password             *string   `json:"password,omitempty" bson:"password"`
	MedicalInfoID        *string   `json:"medical_info_id,omitempty" bson:"medical_info_id"`
	RendezVousIds        []*string `json:"rendez_vous_ids,omitempty" bson:"rendez_vous_ids"`
	DocumentIds          []*string `json:"document_ids,omitempty" bson:"document_ids"`
	TreatmentFollowUpIds []*string `json:"treatment_follow_up_ids,omitempty" bson:"treatment_follow_up_ids"`
	ChatIds              []*string `json:"chat_ids,omitempty" bson:"chat_ids"`
	Status               *bool     `json:"status,omitempty" bson:"status"`
	DeviceConnect        []*string `json:"device_connect,omitempty" bson:"device_connect"`
	DoubleAuthMethodsID  *string   `json:"double_auth_methods_id,omitempty" bson:"double_auth_methods_id"`
	TrustDevices         []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type UpdatePatientRendezVousIdsInput struct {
	RendezVousIds []*string `json:"rendez_vous_ids,omitempty" bson:"rendez_vous_ids"`
}

type UpdatePatientTrustDeviceInput struct {
	TrustDevices []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type UpdatePatientsDeviceConnectInput struct {
	DeviceConnect []*string `json:"device_connect,omitempty" bson:"device_connect"`
	TrustDevices  []*string `json:"trust_devices,omitempty" bson:"trust_devices"`
}

type UpdatePeriodOrdonnanceInput struct {
	Quantity       *int          `json:"quantity,omitempty" bson:"quantity"`
	Frequency      *int          `json:"frequency,omitempty" bson:"frequency"`
	FrequencyRatio *string       `json:"frequency_ratio,omitempty" bson:"frequency_ratio"`
	FrequencyUnit  *TimeUnitEnum `json:"frequency_unit,omitempty" bson:"frequency_unit"`
	PeriodLength   *int          `json:"period_length,omitempty" bson:"period_length"`
	PeriodUnit     *TimeUnitEnum `json:"period_unit,omitempty" bson:"period_unit"`
}

type UpdateRdvInput struct {
	IDPatient         *string            `json:"id_patient,omitempty" bson:"id_patient"`
	DoctorID          *string            `json:"doctor_id,omitempty" bson:"doctor_id"`
	StartDate         *int               `json:"start_date,omitempty" bson:"start_date"`
	EndDate           *int               `json:"end_date,omitempty" bson:"end_date"`
	CancelationReason *string            `json:"cancelation_reason,omitempty" bson:"cancelation_reason"`
	AppointmentStatus *AppointmentStatus `json:"appointment_status,omitempty" bson:"appointment_status"`
	SessionID         *string            `json:"session_id,omitempty" bson:"session_id"`
	HealthMethod      *string            `json:"health_method,omitempty" bson:"health_method"`
}

type UpdateSaveCodeInput struct {
	Code []string `json:"code,omitempty" bson:"code"`
}

type UpdateSessionInput struct {
	Diseases          []*SessionDiseasesInput `json:"diseases,omitempty" bson:"diseases"`
	Symptoms          []*SessionSymptomInput  `json:"symptoms,omitempty" bson:"symptoms"`
	Age               *int                    `json:"age,omitempty" bson:"age"`
	Height            *int                    `json:"height,omitempty" bson:"height"`
	Weight            *int                    `json:"weight,omitempty" bson:"weight"`
	Sex               *string                 `json:"sex,omitempty" bson:"sex"`
	AnteChirs         []string                `json:"ante_chirs,omitempty" bson:"ante_chirs"`
	AnteDiseases      []string                `json:"ante_diseases,omitempty" bson:"ante_diseases"`
	Medicine          []string                `json:"medicine,omitempty" bson:"medicine"`
	LastQuestion      *string                 `json:"last_question,omitempty" bson:"last_question"`
	Logs              []*LogsInput            `json:"logs,omitempty" bson:"logs"`
	HereditaryDisease []string                `json:"hereditary_disease,omitempty" bson:"hereditary_disease"`
	Alerts            []string                `json:"alerts,omitempty" bson:"alerts"`
}

type UpdateSymptomInput struct {
	Code             *string  `json:"code,omitempty" bson:"code"`
	Name             *string  `json:"name,omitempty" bson:"name"`
	Chronic          *int     `json:"chronic,omitempty" bson:"chronic"`
	Symptom          []string `json:"symptom,omitempty" bson:"symptom"`
	Advice           *string  `json:"advice,omitempty" bson:"advice"`
	Question         *string  `json:"question,omitempty" bson:"question"`
	QuestionBasic    *string  `json:"question_basic,omitempty" bson:"question_basic"`
	QuestionDuration *string  `json:"question_duration,omitempty" bson:"question_duration"`
	QuestionAnte     *string  `json:"question_ante,omitempty" bson:"question_ante"`
}

type UpdateTreatmentInput struct {
	Period     []Period `json:"period,omitempty" bson:"period"`
	Day        []Day    `json:"day,omitempty" bson:"day"`
	Quantity   *int     `json:"quantity,omitempty" bson:"quantity"`
	MedicineID *string  `json:"medicine_id,omitempty" bson:"medicine_id"`
	StartDate  *int     `json:"start_date,omitempty" bson:"start_date"`
	EndDate    *int     `json:"end_date,omitempty" bson:"end_date"`
}

type UpdateTreatmentsFollowUpInput struct {
	TreatmentID *string  `json:"treatment_id,omitempty" bson:"treatment_id"`
	Date        *int     `json:"date,omitempty" bson:"date"`
	Period      []Period `json:"period,omitempty" bson:"period"`
}

type AppointmentStatus string

const (
	AppointmentStatusWaitingForReview    AppointmentStatus = "WAITING_FOR_REVIEW"
	AppointmentStatusAcceptedDueToReview AppointmentStatus = "ACCEPTED_DUE_TO_REVIEW"
	AppointmentStatusCanceledDueToReview AppointmentStatus = "CANCELED_DUE_TO_REVIEW"
	AppointmentStatusCanceled            AppointmentStatus = "CANCELED"
	AppointmentStatusOpened              AppointmentStatus = "OPENED"
)

var AllAppointmentStatus = []AppointmentStatus{
	AppointmentStatusWaitingForReview,
	AppointmentStatusAcceptedDueToReview,
	AppointmentStatusCanceledDueToReview,
	AppointmentStatusCanceled,
	AppointmentStatusOpened,
}

func (e AppointmentStatus) IsValid() bool {
	switch e {
	case AppointmentStatusWaitingForReview, AppointmentStatusAcceptedDueToReview, AppointmentStatusCanceledDueToReview, AppointmentStatusCanceled, AppointmentStatusOpened:
		return true
	}
	return false
}

func (e AppointmentStatus) String() string {
	return string(e)
}

func (e *AppointmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppointmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppointmentStatus", str)
	}
	return nil
}

func (e AppointmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AutoAnswerType string

const (
	AutoAnswerTypeUniqueChoice   AutoAnswerType = "UNIQUE_CHOICE"
	AutoAnswerTypeMultipleChoice AutoAnswerType = "MULTIPLE_CHOICE"
)

var AllAutoAnswerType = []AutoAnswerType{
	AutoAnswerTypeUniqueChoice,
	AutoAnswerTypeMultipleChoice,
}

func (e AutoAnswerType) IsValid() bool {
	switch e {
	case AutoAnswerTypeUniqueChoice, AutoAnswerTypeMultipleChoice:
		return true
	}
	return false
}

func (e AutoAnswerType) String() string {
	return string(e)
}

func (e *AutoAnswerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AutoAnswerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AutoAnswerType", str)
	}
	return nil
}

func (e AutoAnswerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Category string

const (
	CategoryGeneral Category = "GENERAL"
	CategoryFinance Category = "FINANCE"
)

var AllCategory = []Category{
	CategoryGeneral,
	CategoryFinance,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryGeneral, CategoryFinance:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Day string

const (
	DayMonday    Day = "MONDAY"
	DayTuesday   Day = "TUESDAY"
	DayWednesday Day = "WEDNESDAY"
	DayThursday  Day = "THURSDAY"
	DayFriday    Day = "FRIDAY"
	DaySaturday  Day = "SATURDAY"
	DaySunday    Day = "SUNDAY"
)

var AllDay = []Day{
	DayMonday,
	DayTuesday,
	DayWednesday,
	DayThursday,
	DayFriday,
	DaySaturday,
	DaySunday,
}

func (e Day) IsValid() bool {
	switch e {
	case DayMonday, DayTuesday, DayWednesday, DayThursday, DayFriday, DaySaturday, DaySunday:
		return true
	}
	return false
}

func (e Day) String() string {
	return string(e)
}

func (e *Day) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Day(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Day", str)
	}
	return nil
}

func (e Day) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DocumentType string

const (
	DocumentTypeXray         DocumentType = "XRAY"
	DocumentTypePrescription DocumentType = "PRESCRIPTION"
	DocumentTypeOther        DocumentType = "OTHER"
	DocumentTypeCertificate  DocumentType = "CERTIFICATE"
)

var AllDocumentType = []DocumentType{
	DocumentTypeXray,
	DocumentTypePrescription,
	DocumentTypeOther,
	DocumentTypeCertificate,
}

func (e DocumentType) IsValid() bool {
	switch e {
	case DocumentTypeXray, DocumentTypePrescription, DocumentTypeOther, DocumentTypeCertificate:
		return true
	}
	return false
}

func (e DocumentType) String() string {
	return string(e)
}

func (e *DocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentType", str)
	}
	return nil
}

func (e DocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MedicineUnit string

const (
	MedicineUnitApplication MedicineUnit = "APPLICATION"
	MedicineUnitTablet      MedicineUnit = "TABLET"
	MedicineUnitTablespoon  MedicineUnit = "TABLESPOON"
	MedicineUnitCoffeespoon MedicineUnit = "COFFEESPOON"
)

var AllMedicineUnit = []MedicineUnit{
	MedicineUnitApplication,
	MedicineUnitTablet,
	MedicineUnitTablespoon,
	MedicineUnitCoffeespoon,
}

func (e MedicineUnit) IsValid() bool {
	switch e {
	case MedicineUnitApplication, MedicineUnitTablet, MedicineUnitTablespoon, MedicineUnitCoffeespoon:
		return true
	}
	return false
}

func (e MedicineUnit) String() string {
	return string(e)
}

func (e *MedicineUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MedicineUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MedicineUnit", str)
	}
	return nil
}

func (e MedicineUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingStatus string

const (
	OnboardingStatusNotStarted OnboardingStatus = "NOT_STARTED"
	OnboardingStatusInProgress OnboardingStatus = "IN_PROGRESS"
	OnboardingStatusDone       OnboardingStatus = "DONE"
)

var AllOnboardingStatus = []OnboardingStatus{
	OnboardingStatusNotStarted,
	OnboardingStatusInProgress,
	OnboardingStatusDone,
}

func (e OnboardingStatus) IsValid() bool {
	switch e {
	case OnboardingStatusNotStarted, OnboardingStatusInProgress, OnboardingStatusDone:
		return true
	}
	return false
}

func (e OnboardingStatus) String() string {
	return string(e)
}

func (e *OnboardingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingStatus", str)
	}
	return nil
}

func (e OnboardingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Period string

const (
	PeriodMorning Period = "MORNING"
	PeriodNoon    Period = "NOON"
	PeriodEvening Period = "EVENING"
	PeriodNight   Period = "NIGHT"
)

var AllPeriod = []Period{
	PeriodMorning,
	PeriodNoon,
	PeriodEvening,
	PeriodNight,
}

func (e Period) IsValid() bool {
	switch e {
	case PeriodMorning, PeriodNoon, PeriodEvening, PeriodNight:
		return true
	}
	return false
}

func (e Period) String() string {
	return string(e)
}

func (e *Period) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Period(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Period", str)
	}
	return nil
}

func (e Period) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Sex string

const (
	SexMale   Sex = "MALE"
	SexFemale Sex = "FEMALE"
	SexOther  Sex = "OTHER"
)

var AllSex = []Sex{
	SexMale,
	SexFemale,
	SexOther,
}

func (e Sex) IsValid() bool {
	switch e {
	case SexMale, SexFemale, SexOther:
		return true
	}
	return false
}

func (e Sex) String() string {
	return string(e)
}

func (e *Sex) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sex(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sex", str)
	}
	return nil
}

func (e Sex) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContainerEnum string

const (
	ContainerEnumFlacon ContainerEnum = "FLACON"
	ContainerEnumTube   ContainerEnum = "TUBE"
	ContainerEnumBoite  ContainerEnum = "BOITE"
)

var AllContainerEnum = []ContainerEnum{
	ContainerEnumFlacon,
	ContainerEnumTube,
	ContainerEnumBoite,
}

func (e ContainerEnum) IsValid() bool {
	switch e {
	case ContainerEnumFlacon, ContainerEnumTube, ContainerEnumBoite:
		return true
	}
	return false
}

func (e ContainerEnum) String() string {
	return string(e)
}

func (e *ContainerEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContainerEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid container_enum", str)
	}
	return nil
}

func (e ContainerEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FormEnum string

const (
	FormEnumCreme                FormEnum = "CREME"
	FormEnumPommade              FormEnum = "POMMADE"
	FormEnumGelule               FormEnum = "GELULE"
	FormEnumComprime             FormEnum = "COMPRIME"
	FormEnumGele                 FormEnum = "GELE"
	FormEnumSolutionBuvable      FormEnum = "SOLUTION_BUVABLE"
	FormEnumPoudre               FormEnum = "POUDRE"
	FormEnumSuppositoire         FormEnum = "SUPPOSITOIRE"
	FormEnumAmpoule              FormEnum = "AMPOULE"
	FormEnumSuspensionNasale     FormEnum = "SUSPENSION_NASALE"
	FormEnumSpray                FormEnum = "SPRAY"
	FormEnumCollutoire           FormEnum = "COLLUTOIRE"
	FormEnumShampooing           FormEnum = "SHAMPOOING"
	FormEnumSolutionInjectable   FormEnum = "SOLUTION_INJECTABLE"
	FormEnumComprimerEfervescent FormEnum = "COMPRIMER_EFERVESCENT"
	FormEnumGranulerEnSachet     FormEnum = "GRANULER_EN_SACHET"
	FormEnumPastille             FormEnum = "PASTILLE"
	FormEnumSirop                FormEnum = "SIROP"
)

var AllFormEnum = []FormEnum{
	FormEnumCreme,
	FormEnumPommade,
	FormEnumGelule,
	FormEnumComprime,
	FormEnumGele,
	FormEnumSolutionBuvable,
	FormEnumPoudre,
	FormEnumSuppositoire,
	FormEnumAmpoule,
	FormEnumSuspensionNasale,
	FormEnumSpray,
	FormEnumCollutoire,
	FormEnumShampooing,
	FormEnumSolutionInjectable,
	FormEnumComprimerEfervescent,
	FormEnumGranulerEnSachet,
	FormEnumPastille,
	FormEnumSirop,
}

func (e FormEnum) IsValid() bool {
	switch e {
	case FormEnumCreme, FormEnumPommade, FormEnumGelule, FormEnumComprime, FormEnumGele, FormEnumSolutionBuvable, FormEnumPoudre, FormEnumSuppositoire, FormEnumAmpoule, FormEnumSuspensionNasale, FormEnumSpray, FormEnumCollutoire, FormEnumShampooing, FormEnumSolutionInjectable, FormEnumComprimerEfervescent, FormEnumGranulerEnSachet, FormEnumPastille, FormEnumSirop:
		return true
	}
	return false
}

func (e FormEnum) String() string {
	return string(e)
}

func (e *FormEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FormEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid form_enum", str)
	}
	return nil
}

func (e FormEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeUnitEnum string

const (
	TimeUnitEnumJour    TimeUnitEnum = "JOUR"
	TimeUnitEnumSemaine TimeUnitEnum = "SEMAINE"
	TimeUnitEnumMois    TimeUnitEnum = "MOIS"
	TimeUnitEnumAnnee   TimeUnitEnum = "ANNEE"
)

var AllTimeUnitEnum = []TimeUnitEnum{
	TimeUnitEnumJour,
	TimeUnitEnumSemaine,
	TimeUnitEnumMois,
	TimeUnitEnumAnnee,
}

func (e TimeUnitEnum) IsValid() bool {
	switch e {
	case TimeUnitEnumJour, TimeUnitEnumSemaine, TimeUnitEnumMois, TimeUnitEnumAnnee:
		return true
	}
	return false
}

func (e TimeUnitEnum) String() string {
	return string(e)
}

func (e *TimeUnitEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeUnitEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid time_unit_enum", str)
	}
	return nil
}

func (e TimeUnitEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UnitEnum string

const (
	UnitEnumMl UnitEnum = "ml"
	UnitEnumMg UnitEnum = "mg"
	UnitEnumG  UnitEnum = "g"
)

var AllUnitEnum = []UnitEnum{
	UnitEnumMl,
	UnitEnumMg,
	UnitEnumG,
}

func (e UnitEnum) IsValid() bool {
	switch e {
	case UnitEnumMl, UnitEnumMg, UnitEnumG:
		return true
	}
	return false
}

func (e UnitEnum) String() string {
	return string(e)
}

func (e *UnitEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid unit_enum", str)
	}
	return nil
}

func (e UnitEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
