# Patient entity
type Patient {
    id: ID!
    email: String!
    password: String!
    rendez_vous_ids: [String]
    medical_info_id: String
    document_ids: [String]
    treatment_follow_up_ids: [String]
    chat_ids: [String]
    double_auth_methods_id: String
    device_connect: [String]
    trust_devices: [String]
    status: Boolean!
    createdAt: Int!
    updatedAt: Int!
}

# Doctor entity
type Doctor {
    id: ID!
    email: String!
    password: String!
    name: String!
    firstname: String!
    address: Address!
    rendez_vous_ids: [String]
    patient_ids: [String]
    chat_ids: [String]
    double_auth_methods_id: String
    device_connect: [String]
    trust_devices: [String]
    ordonnance_ids: [String]
    status: Boolean!
    createdAt: Int!
    updatedAt: Int!
}

# Admin entity
type Admin {
    id: ID!
    email: String!
    password: String!
    name: String!
    last_name: String!
    createdAt: Int!
    updatedAt: Int!
}

# Session entity
type Session {
    id: ID!
    diseases: [SessionDiseases!]!
    symptoms: [SessionSymptom!]!
    age: Int!
    height: Int!
    weight: Int!
    sex: String!
    ante_chirs: [String!]!
    ante_diseases: [String!]!
    medicine: [String!]!
    last_question: String!
    logs: [Logs!]!
    hereditary_disease: [String!]!
    alerts: [String!]!
    createdAt: Int!
    updatedAt: Int!
}

# Symptom entity
type Symptom {
    id: ID!
    name: String!
    chronic: Int
    symptom: [String!]!
    advice: String
    question: String #todo: enlever
    question_basic: String!
    question_duration: String!
    question_ante: String!
    createdAt: Int!
    updatedAt: Int!
}

# Disease entity
type Disease {
	id: ID!
    name: String!
    symptoms: [String!]!
    symptoms_weight: [SymptomsWeight!]
    overweight_factor: Float!
    heredity_factor: Float!
    advice: String
    createdAt: Int!
    updatedAt: Int!
}

# MedicalInfo entity
type MedicalInfo {
    id: ID!
    name: String!
    firstname: String!
    birthdate: Int!
    sex: Sex!
    height: Int!
    weight: Int!
    primary_doctor_id: String!
    onboarding_status: OnboardingStatus!
    antecedent_disease_ids: [String!]!
    family_members_med_info_id: [String!]!
    createdAt: Int!
    updatedAt: Int!
}


# Notification entity
type Notification {
	id:	ID!
	token: String!
	title: String!
    message: String!
    createdAt: Int!
    updatedAt: Int!
}

# Rdv entity
type Rdv {
    id: ID!
    doctor_id: String!
    id_patient: String!
    start_date: Int!
    end_date: Int!
    cancelation_reason: String
    appointment_status: AppointmentStatus!
    session_id: String!
    health_method: String
    createdAt: Int!
    updatedAt: Int!
}

# Document entity
type Document {
    id: ID!
    owner_id: String!
    name: String!
    document_type: DocumentType!
    category: Category!
    is_favorite: Boolean!
    download_url: String!
    uploader_id: String!
    createdAt: Int!
    updatedAt: Int!
}

# AnteChir entity
type AnteChir {
    id: ID!
    name: String!
    induced_symptoms: [ChirInducedSymptom!]
    createdAt: Int!
    updatedAt: Int!
}

# AnteDisease entity
type AnteDisease {
    id: ID!
    name: String!
    chronicity: Float!
    surgery_ids: [String!]
    symptoms: [String!]
    treatment_ids: [String!]
    still_relevant: Boolean!
    createdAt: Int!
    updatedAt: Int!
    symptomsclear: [Symptom!]
}


# AnteFamily entity
type AnteFamily {
    id: ID!
    name: String!
    disease: [String!]!
    createdAt: Int!
    updatedAt: Int!
}


# MedicalAntecedents entity
type MedicalAntecedents {
    id: ID!
    name: String!
    symptoms: [String!]!
    treatments: [AntecedentTreatment!]!
    createdAt: Int!
    updatedAt: Int!
}


# Treatment entity
type AntecedentTreatment {
    id: ID!
    created_by: String!
    start_date: Int!
    end_date: Int
    medicines: [AntecedentsMedicines!]!

}

type AntecedentsMedicines {
    medicine_id: String!
    comment: String
    period: [AntecedentPeriod!]!
}

type AntecedentPeriod {
    quantity: Int!
    frequency: Int!
    frequency_ratio: Int!
    frequency_unit: time_unit_enum!
    period_length: Int
    period_unit: time_unit_enum
}




# Alert entity
type Alert {
    id: ID!
    name: String!
    sex: String
    height: Int
    weight: Int
    symptoms: [String!]!
    comment: String!
    createdAt: Int!
    updatedAt: Int!
}

# Medicine entity
type Medicine {
    id: ID!
    dci: String!
    target_diseases: [String!]!
    treated_symptoms: [String!]!
    side_effects: [String!]!
    dosage: Float!
    dosage_unit: unit_enum!
    container: container_enum!
    name: String!
    dosage_form: form_enum!
    createdAt: Int!
    updatedAt: Int!
    symptoms: [Symptom!]
}

# TreatmentsFollowUp entity
type TreatmentsFollowUp {
    id: ID!
    treatment_id: String!
    date: Int!
    period: [Period!]!
    createdAt: Int!
    updatedAt: Int!
}

# NlpReport entity
type NlpReport {
    id: ID!
    version: Int!
    input_symptoms: [String!]!
    input_sentence: String!
    output: [NlpReportOutput!]!
    computation_time: Int!
    createdAt: Int!
    updatedAt: Int!
}

# Chat entity
type Chat {
    id: ID!
    participants: [ChatParticipants!]!
    messages: [ChatMessages!]!
    createdAt: Int!
    updatedAt: Int!
}

type DoubleAuth {
    id: ID!
    methods: [String!]!
    secret: String!
    code: String!
    trust_device_id: [String!]!
    createdAt: Int!
    updatedAt: Int!
}

type DeviceConnect {
    id: ID!
    device_type: String!
    browser: String!
    ip_address: String!
    city: String!
    country: String!
    date: Int!
    trust_device: Boolean!
    createdAt: Int!
    updatedAt: Int!
}

type BlackList {
    id: ID!
    token: [String!]!
    createdAt: Int!
    updatedAt: Int!
}

type SaveCode {
    id: ID!
    code: [String!]!
    createdAt: Int!
    updatedAt: Int!
}

type Ordonnance {
    id: ID!
    created_by: String!
    patient_id: String!
    medicines: [MedicineOrdonnance!]!
    createdAt: Int!
    updatedAt: Int!
}

type AutoAnswer {
    id: ID!
    name: String!
    values:[String]!
    type: AutoAnswerType!
    createdAt: Int!
    updatedAt: Int!
}

##  Substructure  ----------------------------------------------------------------------------------------------------

type Address {
    street: String!
    zip_code: String!
    country: String!
    city: String!
}

type ChirInducedSymptom {
    symptom: String!
    factor: Float!
}

type SymptomsWeight {
    symptom: String!
    value: Float!
    chronic: Boolean!
}

type SessionSymptom {
    name: String!
    presence: Int! # 0(Ne sais pas) | 1(Pr√©sent) | 2(Absent)
    duration: Int
    treated: [String!]
}

type Logs {
    question: String!
    answer: String!
}

type SessionDiseases {
    name: String!
    presence: Float!
    unknown_presence: Float!
}

type NlpReportOutput {
    symptom: String!
    present: Boolean
    days: Int
}

type ChatParticipants {
    participant_id: String!
    last_seen: Int!
}

type ChatMessages {
    owner_id: String!
    message: String!
    sended_time: Int!
}


type MedicineOrdonnance {
    medicine_id: String!
    qsp: Int!
    qsp_unit: time_unit_enum!
    comment: String
    periods: [PeriodOrdonnance!]!
}

type PeriodOrdonnance {
    quantity: Int!
    frequency: Int!
    frequency_ratio: Int!
    frequency_unit: time_unit_enum!
    period_length: Int
    period_unit: time_unit_enum
}

## Inputs -------------------------------------------------------------------------------------------------------------

input CreatePatientInput {
    email: String!
    password: String!
    status: Boolean!
    device_connect: [String]
    double_auth_methods_id: String
    trust_devices: [String]
}

input UpdatePatientInput {
    email: String
    password: String
    medical_info_id: String
    rendez_vous_ids: [String]
    document_ids: [String]
    treatment_follow_up_ids: [String]
    chat_ids: [String]
    status: Boolean
    device_connect: [String]
    double_auth_methods_id: String
    trust_devices: [String]
}

input CreateDoctorInput {
    email: String!
    password: String!
    name: String!
    firstname: String!
    address: AddressInput!
    status: Boolean!
}

input UpdateDoctorInput {
    email: String
    password: String
    name: String
    firstname: String
    rendez_vous_ids: [String]
    patient_ids: [String]
    address: AddressInput
    chat_ids: [String]
    device_connect: [String]
    double_auth_methods_id: String
    trust_devices: [String]
    ordonnance_ids: [String]
    status: Boolean
}

input UpdateDoctorsPatientIDsInput {
    patient_ids: [String]
}

input UpdatePatientsDeviceConnectInput {
    device_connect: [String]
    trust_devices: [String]
}

input UpdateDoctorsDeviceConnectInput {
    device_connect: [String]
    trust_devices: [String]
}

input UpdateDoctorsTrustDeviceInput {
    trust_devices: [String]
}

input UpdatePatientTrustDeviceInput {
    trust_devices: [String]
}

input UpdatePatientRendezVousIdsInput {
    rendez_vous_ids: [String]
}

input UpdateAccountMedicalFolder {
    antecedent_disease_ids: [String]
}

input UpdatePatientFollowTreatmentInput {
    treatment_follow_up_ids: [String]
}

input UpdatePatientAntediseaseInput {
    treatment_ids: [String]
}

input UpdateMedicalFOlderAntedisease {
    antecedent_disease_ids: [String]
}


input AddressInput {
    street: String!
    zip_code: String!
    country: String!
    city: String!
}

input CreateAdminInput {
    email: String!
    password: String!
    name: String!
    last_name: String!
}

input UpdateAdminInput {
    email: String
    password: String
    name: String
    last_name: String
}

input CreateSessionInput {
    age: Int!
    height: Int!
    weight: Int!
    sex: String!
    ante_chirs: [String!]!
    ante_diseases: [String!]!
    medicine: [String!]!
    hereditary_disease: [String!]!
}

input UpdateSessionInput {
    diseases: [SessionDiseasesInput!]
    symptoms: [SessionSymptomInput!]
    age: Int
    height: Int
    weight: Int
    sex: String
    ante_chirs: [String!]
    ante_diseases: [String!]
    medicine: [String!]
    last_question: String
    logs: [LogsInput!]
    hereditary_disease: [String!]
    alerts: [String!]
}

input SessionDiseasesInput {
    name: String!
    presence: Float!
    unknown_presence: Float!
}

input CreateSymptomInput {
    name: String!
    chronic: Int
    symptom: [String!]!
    advice: String
    question_basic: String!
    question_duration: String!
    question_ante: String!
}

input UpdateSymptomInput {
    name: String
    chronic: Int
    symptom: [String!]
    advice: String
    question: String # todo: enlever
    question_basic: String
    question_duration: String
    question_ante: String
}

input CreateDiseaseInput {
    name: String!
    symptoms: [String!]!
    symptoms_weight: [SymptomsWeightInput!]
    overweight_factor: Float!
    heredity_factor: Float!
    advice: String
}

input UpdateDiseaseInput {
    name: String
    symptoms: [String!]
    symptoms_weight: [SymptomsWeightInput!]
    overweight_factor: Float
    heredity_factor: Float
    advice: String
}

input CreateNotificationInput {
    token: String!
    message: String!
    title: String!
}

input UpdateNotificationInput {
    token: String!
    message: String!
    title: String!
}

input CreateRdvInput {
    id_patient: String!
    doctor_id: String!
    start_date: Int!
    end_date: Int!
    appointment_status: AppointmentStatus!
    session_id: String!
}

input UpdateRdvInput {
    id_patient: String
    doctor_id: String
    start_date: Int
    end_date: Int
    cancelation_reason: String
    appointment_status: AppointmentStatus
    session_id: String
    health_method: String
}


input CreateDocumentInput {
    owner_id: String!
    name: String!
    document_type: String!
    category: String!
    is_favorite: Boolean!
    download_url: String!
    uploader_id: String!
}

input UpdateDocumentInput {
    name: String
    is_favorite: Boolean
}

input CreateAnteChirInput {
    name: String!
    induced_symptoms: [ChirInducedSymptomInput!]
}

input UpdateAnteChirInput {
    name: String
    induced_symptoms: [ChirInducedSymptomInput!]
}

input CreateAnteDiseaseInput {
    name: String!
    chronicity: Float
    surgery_ids: [String!]
    symptoms: [String!]
    treatment_ids: [String!]
    still_relevant: Boolean!
}

input UpdateAnteDiseaseInput {
    name: String
    chronicity: Float
    surgery_ids: [String!]
    symptoms: [String!]
    treatment_ids: [String!]
    still_relevant: Boolean
}

input CreateAnteFamilyInput {
    name: String!
    disease: [String!]!
}

input UpdateAnteFamilyInput {
    name: String
    disease: [String!]
}

input CreateAlertInput {
    name: String!
    sex: String
    height: Int
    weight: Int
    symptoms: [String!]!
    comment: String!
}

input UpdateAlertInput {
    name: String
    sex: String
    height: Int
    weight: Int
    symptoms: [String!]
    comment: String
}

input CreateMedicineInput {
    dci: String!
    target_diseases: [String!]!
    treated_symptoms: [String!]!
    side_effects: [String!]!
    dosage: Float!
    dosage_unit: unit_enum!
    container: container_enum!
    name: String!
    dosage_form: form_enum!
}

input CreateMedicalFolderInput {
    name: String!
    firstname: String!
    birthdate: Int!
    sex: String!
    height: Int!
    weight: Int!
    primary_doctor_id: String!
    antecedent_disease_ids: [String!]
    onboarding_status: String!
    family_members_med_info_id: [String!]!
}

input UpdateMedicalFolderInput {
    name: String
    firstname: String
    birthdate: Int
    sex: String
    height: Int
    weight: Int
    primary_doctor_id: String
    antecedent_disease_ids: [String!]
    onboarding_status: OnboardingStatus
    family_members_med_info_id: [String!]
}


input CreateTreatmentsFollowUpInput {
    treatment_id: String!
    date: Int!
    period: [Period!]!
}

input UpdateTreatmentsFollowUpInput {
    treatment_id: String
    date: Int
    period: [Period!]
}

input CreateNlpReportInput {
    version: Int!
    input_symptoms: [String!]!
    input_sentence: String!
    output: [NlpReportOutputInput!]!
    computation_time: Int!
}

input CreateChatInput {
    participants: [ChatParticipantsInput!]!
    messages: [ChatMessagesInput!]!
}

input UpdateChatInput {
    participants: [ChatParticipantsInput!]
    messages: [ChatMessagesInput!]
}


input CreateMedicalAntecedentsInput {
    name: String!
    symptoms: [String!]!
    treatments: [CreateAntecedentTreatmentInput!]!
}

input CreateAntecedentTreatmentInput {
    created_by: String!
    start_date: Int!
    end_date: Int
    medicines: [CreateAntecedentsMedicinesInput!]!
}

input CreateAntecedentsMedicinesInput {
    medicine_id: String!
    comment: String
    period: [CreateAntecedentPeriodInput!]!
}

input CreateAntecedentPeriodInput {
    quantity: Int!
    frequency: Int!
    frequency_ratio: Int!
    frequency_unit: time_unit_enum!
    period_length: Int
    period_unit: time_unit_enum
}


input UpdateMedicalAntecedentsInput {
    name: String
    symptoms: [String!]
}

input UpdateTreatmentMedicalAntecedentsInput {
    treatments: [UpdateTreatmentMedicalInfoInput!]
}

input UpdateTreatmentMedicalInfoInput {
    id: ID
    created_by: String
    start_date: Int
    end_date: Int
    medicines: [UpdateTreatmentMedicineMedicalInput!]
}

input UpdateTreatmentMedicineMedicalInput {
    medicine_id: String
    comment: String
    period: [UpdateTreatmentPeriodMedicalInput!]
}


input UpdateTreatmentPeriodMedicalInput {
    quantity: Int
    frequency: Int
    frequency_ratio: Int
    frequency_unit: time_unit_enum
    period_length: Int
    period_unit: time_unit_enum
}


input UpdateAntecedentTreatmentInput {
    created_by: String
    start_date: Int
    end_date: Int
    medicines: [UpdateAntecedentsMedicinesInput!]
}

input UpdateAntecedentsMedicinesInput {
    medicine_id: String
    comment: String
    period: [UpdateAntecedentPeriodInput!]
}

input UpdateAntecedentPeriodInput {
    quantity: Int
    frequency: Int
    frequency_ratio: Int
    frequency_unit: time_unit_enum
    period_length: Int
    period_unit: time_unit_enum
}


input MedicineInput {
    dci: String!
    target_diseases: [String!]!
    treated_symptoms: [String!]!
    side_effects: [String!]!
    dosage: Float!
    dosage_unit: unit_enum!
    container: container_enum!
    name: String!
    dosage_form: form_enum!
}

input ChirInducedSymptomInput {
    symptom: String!
    factor: Float!
}

input SymptomsWeightInput {
    symptom: String!
    value: Float!
    chronic: Boolean!
}

input SessionSymptomInput {
    name: String!
    presence: Int! # 0(Ne sais pas) | 1(Pr√©sent) | 2(Absent)
    duration: Int
    treated: [String!]
}

input CreateDeviceConnectInput {
    device_type: String!
    browser: String!
    ip_address: String!
    city: String!
    country: String!
    date: Int!
    trust_device: Boolean!
}

input UpdateDeviceConnectInput {
    device_type: String
    browser: String
    ip_address: String
    city: String
    country: String
    date: Int
    trust_device: Boolean
}

input CreateDoubleAuthInput {
    methods: [String!]!
    secret: String!
    code: String!
    trust_device_id: [String!]
}

input UpdateDoubleAuthInput {
    methods: [String!]
    secret: String
    code: String
    url: String
    trust_device_id: [String!]
}

input CreateBlackListInput {
    token: [String!]!
}

input UpdateBlackListInput {
    token: [String!]
}

input CreateSaveCodeInput {
    code: [String!]!
}

input UpdateSaveCodeInput {
    code: [String!]
}

input CreateAutoAnswerInput {
    name: String!
    values:[String]!
    type: AutoAnswerType!
}

input UpdateAutoAnswerInput {
    name: String
    values:[String]
    type: AutoAnswerType
}

input LogsInput {
    question: String!
    answer: String!
}

input NlpReportOutputInput {
    symptom: String!
    present: Boolean
    days: Int
}

input ChatParticipantsInput {
    participant_id: String!
    last_seen: Int!
}

input ChatMessagesInput {
    owner_id: String!
    message: String!
    sended_time: Int!
}


input CreateOrdonnanceInput {
    created_by: String!
    patient_id: String!
    medicines: [MedicineOrdonnanceInput!]!
}

input MedicineOrdonnanceInput {
    medicine_id: String!
    qsp: Int!
    qsp_unit: time_unit_enum!
    comment: String
    periods: [PeriodOrdonnanceInput!]!
}

input PeriodOrdonnanceInput {
    quantity: Int!
    frequency: Int!
    frequency_ratio: Int!
    frequency_unit: time_unit_enum!
    period_length: Int
    period_unit: time_unit_enum
}

input UpdateOrdonnanceInput {
    created_by: String
    patient_id: String
    medicines: [MedicineOrdonnanceInput!]
}

input UpdateMedicineOrdonnanceInput {
    medicine_id: String
    qsp: Int
    qsp_unit: time_unit_enum
    comment: String
    periods: [UpdatePeriodOrdonnanceInput!]
}

input UpdatePeriodOrdonnanceInput {
    quantity: Int
    frequency: Int
    frequency_ratio: String
    frequency_unit: time_unit_enum
    period_length: Int
    period_unit: time_unit_enum
}



##  Enums  ------------------------------------------------------------------------------------------------------------

enum Sex {
    MALE,
    FEMALE,
    OTHER
}

enum OnboardingStatus {
	NOT_STARTED,
	IN_PROGRESS,
    DONE
}

enum Category {
    GENERAL,
    FINANCE
}

enum DocumentType {
    XRAY,
    PRESCRIPTION,
    OTHER,
    CERTIFICATE
}

enum MedicineUnit {
    APPLICATION,
    TABLET,
    TABLESPOON,
    COFFEESPOON
}

enum Period {
    MORNING,
    NOON,
    EVENING,
    NIGHT
}

enum Day {
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY,
    SUNDAY
}

enum AppointmentStatus {
    WAITING_FOR_REVIEW,
    ACCEPTED_DUE_TO_REVIEW,
    CANCELED_DUE_TO_REVIEW,
    CANCELED,
    OPENED
}

enum unit_enum {
    ml,
    mg
    g
}

enum container_enum {
    FLACON,
    TUBE,
    BOITE,
    AMPOULE
}

enum form_enum {
    CREME,
    POMMADE,
    GELULE,
    COMPRIME,
    GELE,
    SOLUTION_BUVABLE,
    POUDRE,
    SUPPOSITOIRE,
    AMPOULE,
    SUSPENSION_NASALE,
    SPRAY,
    COLLUTOIRE,
    SHAMPOOING,
    SOLUTION_INJECTABLE,
    COMPRIMER_EFERVESCENT,
    GRANULER_EN_SACHET,
    PASTILLE,
    SIROP,
    CAPSULE_MOLLE,
    COMPRIME_ORODISPERSIBLE,
    SOLUTION_INHALATION,
    COMPRIME_PELLICULE,
    COMPRIME_SUBLINGUAL,
    COMPRIME_ENROBE
}

enum time_unit_enum {
    JOUR,
    SEMAINE,
    MOIS,
    ANNEE
}

enum AutoAnswerType {
    UNIQUE_CHOICE,
    MULTIPLE_CHOICE
}

## Utils  -------------------------------------------------------------------------------------------------------------

enum SortOrder {
    ASC
    DESC
}

input SortingOptions {
    order: SortOrder!
    key: String!
}

input Options {
    sort: SortingOptions!
    limit: Int!
    offset: Int!
}

## Query  -------------------------------------------------------------------------------------------------------------

type Query {
    # Get the entire list of patients.
    getPatients(option: Options): [Patient]

    # Find a patient using its id.
    getPatientById(id: String!): Patient

    # Find a patient using its email.
    getPatientByEmail(email: String!): Patient

    # Get the entire list of doctors.
    getDoctors(option: Options): [Doctor]

    # Find a doctor using its id.
    getDoctorById(id: String!): Doctor

    # Find a doctor using its email.
    getDoctorByEmail(email: String!): Doctor

    # Get the entire list of admins.
    getAdmins(option: Options): [Admin]

    # Find a admin using its id.
    getAdminById(id: String!): Admin

    # Find an admin using its email.
    getAdminByEmail(email: String!): Admin

    # Get the entire list of sessions.
    getSessions(option: Options): [Session]

    # Find a session using its id.
    getSessionById(id: String!): Session

    # Find a symptom using its id.
    getSymptomById(id: String!): Symptom

    # Find a symptom using its name.
    getSymptomByName(name: String!): Symptom

    # Get a disease's symptoms by its name
    getSymptomsByDiseaseName(name: String!): Disease

    # Find a disease using its id.
    getDiseaseById(id: String!): Disease

    # Get the entire list of symptoms
    getSymptoms(option: Options): [Symptom]

    # Get the entire list of diseases
    getDiseases(option: Options): [Disease]

    # Get the entire list of notification.
    getNotifications(option: Options): [Notification]

    # Find a Notification using its id.
    getNotificationById(id: String!): Notification

    # Get the entire list of rdv patients.
    getPatientRdv(id_patient: String!, option: Options): [Rdv]

    #Get the entire list of rdv doctors.
    getDoctorRdv(doctor_id: String!, option: Options): [Rdv]

    # Get all rdv
    getRdvs(option: Options): [Rdv]

    # Find a rdv using its id.
    getRdvById(id: String!): Rdv

    #Find a slot and rdv using its id.
    getSlotById(id: String!): Rdv

    #Find all rdv and slot.
    getSlots(id: String!, option: Options): [Rdv]

    # Get the entire list of waiting review
    getWaitingRdv(doctor_id: String!, option: Options): [Rdv]

    # Get the entire list of document patient
    getDocuments(option: Options): [Document]

    # Find a doucment using its id.
    getDocumentById(id: String!): Document

    getPatientDocument(id: String!, option: Options): [Document]

    # Get the entire list of antechirs.
    getAnteChirs(option: Options): [AnteChir]

    # Get an antechir by its id.
    getAnteChirByID(id: String!): AnteChir

    # Get the entire list of antediseases.
    getAnteDiseases(option: Options): [AnteDisease]

    # Get an antedisease by its id.
    getAnteDiseaseByID(id: String!): AnteDisease

    # Get an antedisease by its id with clear symptoms.
    getAnteDiseaseByIDWithSymptoms(anteDiseaseId: String!): AnteDisease

    # Get the entire list of .
    getAnteFamilies(option: Options): [AnteFamily]

    # Get an antefamily by its id.
    getAnteFamilyByID(id: String!): AnteFamily

    #MedicalAntecedents
    getMedicalAntecedents(option: Options): [MedicalAntecedents]

    #MedicalAntecedents by id
    getMedicalAntecedentsById(id: String!): MedicalAntecedents

    # Get the entire list of treatments.
    getAntecedentTreatments(option: Options): [AntecedentTreatment]

    # Get a treament by its id.
    getAntecedentTreatmentByID(id: String!): AntecedentTreatment

    # Get the entire list of alerts.
    getAlerts(option: Options): [Alert]

    # Get an alert by its id.
    getAlertById(id: String!): Alert

    # Get the entire list of Medicament.
    getMedicalFolder(option: Options): [MedicalInfo]

    # Get a Medicine by its id.
    getMedicalFolderById(id: String!): MedicalInfo

    # Get the entire list of Medicine.
    getMedicines(option: Options): [Medicine]

    # Get an Medicine by its id.
    getMedicineByID(id: String!): Medicine

    # Get an Medicine by its id with clear symptoms.
    getMedicineByIDWithSymptoms(medicineId: String!): Medicine

    # Get all patient from doctor with id.
    getPatientsFromDoctorById(id: String!, option: Options): [Patient]

    # Get TreatmentsFollowUp by its id
    getTreatmentsFollowUpById(id: String!): TreatmentsFollowUp

    # Get all TreatmentsFollowUp
    getTreatmentsFollowUps(id: String!, option: Options): [TreatmentsFollowUp]

    # Get NlpReports
    getNlpReports(option: Options): [NlpReport]

    # Get NlpReports by version
    getNlpReportsByVersion(version: Int!, option: Options): [NlpReport]

    # Get Chats
    getChats(id: String!, option: Options): [Chat]

    # Get chat by its id
    getChatById(id: String!): Chat

    # Get device by its id
    getDeviceConnectById(id: String!): DeviceConnect

    # Get device by its ip
    getDeviceConnectByIp(ip_address: String!): DeviceConnect

    # Get DeviceConnects
    getDevicesConnect(id: String!, option: Options): [DeviceConnect]

    # Get double auth by its id
    getDoubleAuthById(id: String!): DoubleAuth

    #Get DoubleAuth
    getDoubleAuths(option: Options): [DoubleAuth]

    # Get Black list
    getBlackListById(id: String!): BlackList

    # Get Black lists
    getBlackList(option: Options): [BlackList]

    # Get Black list
    getSaveCodeById(id: String!): SaveCode

    # Get Save Code
    getSaveCode(option: Options): [SaveCode]

    #Get Ordonance by id
    getOrdonnanceById(id: String!): Ordonnance

    #get Ordonance by doctor id
    getOrdonnanceByDoctorId(doctor_id: String!, option: Options): [Ordonnance]

    # Get Automatic Answer by its ID
    getAutoAnswerById(id: String!): AutoAnswer

    # Get Automatic Answer by its Name
    getAutoAnswerByName(name: String!): AutoAnswer

    # Get Automatic Answers
    getAutoAnswers(option: Options): [AutoAnswer]
}

type Mutation {
    # Create a new patient.
    createPatient(input: CreatePatientInput!): Patient
    
    # Update a patient.
    updatePatient(id: String!, input: UpdatePatientInput!): Patient

    updatePatientsDeviceConnect(id: String!, input: UpdatePatientsDeviceConnectInput!): Patient

    updatePatientTrustDevice(id: String!, input: UpdatePatientTrustDeviceInput!): Patient

    updatePatientsRendezVousIds(id: String!, input: UpdatePatientRendezVousIdsInput!): Patient

    updateAccountsMedicalFolder(id: String!, input: UpdateAccountMedicalFolder!): MedicalInfo

    updatePatientFollowTreatment(id: String!, input: UpdatePatientFollowTreatmentInput!): Patient

    updatePatientAntediesae(id: String!, input: UpdatePatientAntediseaseInput!): AnteDisease

    updateMedicalFolderdAntedisease(id: String!, input: UpdateMedicalFOlderAntedisease!): MedicalInfo

    updateTreatmentsMedicalAntecedents(id: String!, input: UpdateTreatmentMedicalAntecedentsInput!): MedicalAntecedents

    # Delete a patient.
    deletePatient(id: String!): Boolean

    # Create a new doctor.
    createDoctor(input: CreateDoctorInput!): Doctor

    # Update a doctor.
    updateDoctor(id: String!, input: UpdateDoctorInput!): Doctor

    updateDoctorsPatientIDs(id: String!, input: UpdateDoctorsPatientIDsInput!): Doctor

    UpdateDoctorsDeviceConnect(id: String!, input: UpdateDoctorsDeviceConnectInput!): Doctor

    UpdateDoctorsTrustDevice(id: String!, input: UpdateDoctorsTrustDeviceInput!): Doctor

    # Delete a doctor.
    deleteDoctor(id: String!): Boolean

    # Create a new Admin.
    createAdmin(input: CreateAdminInput!): Admin

    # Update a Admin.
    updateAdmin(id: String!, input: UpdateAdminInput!): Admin

    # Delete a Admin.
    deleteAdmin(id: String!): Boolean

    # Create a new session.
    createSession(input: CreateSessionInput!): Session

    # Update a new session.
    updateSession(id: String!, input: UpdateSessionInput!): Session

    # Delete a session.
    deleteSession(id: String!): Boolean

    # Create a new symptom.
    createSymptom(input: CreateSymptomInput!): Symptom

    # Update a new symptom.
    updateSymptom(id: String!, input: UpdateSymptomInput!): Symptom

    # Delete a symptom.
    deleteSymptom(id: String!): Boolean

    # Create a new disease.
    createDisease(input: CreateDiseaseInput!): Disease

    # Update a new disease.
    updateDisease(id: String!, input: UpdateDiseaseInput!): Disease

    # Delete a disease.
    deleteDisease(id: String!): Boolean

    # Create a new notification.
    createNotification(input: CreateNotificationInput!): Notification

    # Update a new notification.
    updateNotification(id: String!, input: UpdateNotificationInput!): Notification

    # Delete a notification.
    deleteNotification(id: String!): Boolean

    # Create a new Rdv.
    createRdv(input: CreateRdvInput!): Rdv

    # Update a new Rdv.
    updateRdv(id: String!, input: UpdateRdvInput!): Rdv

    # Delete a Rdv.
    deleteRdv(id: String!): Boolean

    # Delete a Slot.
    deleteSlot(id: String!): Boolean

    #Create a new document.
    createDocument(input: CreateDocumentInput!): Document

    # Update a new Slot.
    updateDocument(id: String!, input: UpdateDocumentInput!): Document

    # Delete a Slot.
    deleteDocument(id: String!): Boolean

    # Create a new antechir.
    createAnteChir(input: CreateAnteChirInput!): AnteChir

    # Update a new antechir.
    updateAnteChir(id: String!, input: UpdateAnteChirInput!): AnteChir

    # Delete a antechir.
    deleteAnteChir(id: String!): Boolean

    # Create a new antedisease.
    createAnteDisease(input: CreateAnteDiseaseInput!): AnteDisease
    
    # Update a new antedisease.
    updateAnteDisease(id: String!, input: UpdateAnteDiseaseInput!): AnteDisease
    
    # Delete a antedisease.
    deleteAnteDisease(id: String!): Boolean

    # Create a new antefamily.
    createAnteFamily(input: CreateAnteFamilyInput!): AnteFamily

    # Update a new antefamily.
    updateAnteFamily(id: String!, input: UpdateAnteFamilyInput!): AnteFamily

    # Delete a antefamily.
    deleteAnteFamily(id: String!): Boolean

    # Create a new MedicalAntecedents.
    createMedicalAntecedents(input: CreateMedicalAntecedentsInput!): MedicalAntecedents

    # Update a new MedicalAntecedents.
    updateMedicalAntecedents(id: String!, input: UpdateMedicalAntecedentsInput!): MedicalAntecedents

    # Delete a MedicalAntecedents.
    deleteMedicalAntecedents(id: String!): Boolean

    # Create a new treatment.
    createAntecdentTreatment(id: String!, input: CreateAntecedentTreatmentInput!): AntecedentTreatment

    # Update a new treatment.
    updateAntecdentTreatment(id: String!, antecedentID: String!, input: UpdateAntecedentTreatmentInput!): AntecedentTreatment

    # Delete a treatment.
    deleteAntecdentTreatment(id: String!): Boolean

    # Create a new alert.
    createAlert(input: CreateAlertInput!): Alert

    # Update a new alert.
    updateAlert(id: String!, input: UpdateAlertInput!): Alert

    # Delete an alert.
    deleteAlert(id: String!): Boolean

    # Create a new Medicine.
    createMedicine(input: CreateMedicineInput!): Medicine

    # Delete an Medicine.
    deleteMedicine(id: String!): Boolean

    # Create a new MedicalFolder.!
    createMedicalFolder(input: CreateMedicalFolderInput!): MedicalInfo
    
    # Update a new MedicalFolder.
    updateMedicalFolder(id: String!, input: UpdateMedicalFolderInput!): MedicalInfo
    
    # Delete an MedicalFolder.
    deleteMedicalFolder(id: String!): Boolean

    # Create TreatmentsFollowUp
    createTreatmentsFollowUp(input: CreateTreatmentsFollowUpInput!): TreatmentsFollowUp
    
    #Update TreatmentsFollowUp
    updateTreatmentsFollowUp(id: String!, input: UpdateTreatmentsFollowUpInput!): TreatmentsFollowUp
    
    # Delete TreatmentsFollowUp
    deleteTreatmentsFollowUp(id: String!): Boolean

    # Create a new NlpReport
    createNlpReport(input: CreateNlpReportInput!): NlpReport

    # Create a new Chat
    createChat(input: CreateChatInput!): Chat

    #Update a Chat
    updateChat(id: String!, input: UpdateChatInput!): Chat

    #Delete a Chat
    deleteChat(id: String!): Boolean

    # Create new DeviceConnect
    createDeviceConnect(input: CreateDeviceConnectInput!): DeviceConnect

    #update a DeviceConnect
    updateDeviceConnect(id: String!, input: UpdateDeviceConnectInput!): DeviceConnect

    #Delete a DeviceConnect
    deleteDeviceConnect(id: String!): Boolean

    # Create new DoubleAuth
    createDoubleAuth(input: CreateDoubleAuthInput!): DoubleAuth

    #update a DoubleAuth
    updateDoubleAuth(id: String!, input: UpdateDoubleAuthInput!): DoubleAuth

    #Delete a DoubleAuth
    deleteDoubleAuth(id: String!): Boolean

    # Create new BlackList
    createBlackList(input: CreateBlackListInput!): BlackList

    #update a BlackList
    updateBlackList(id: String!, input: UpdateBlackListInput!): BlackList

    #Delete a DeviceConnect
    deleteBlackList(id: String!): Boolean

    # Create new SaveCode
    createSaveCode(input: CreateSaveCodeInput!): SaveCode

    #update a SaveCode
    updateSaveCode(id: String!, input: UpdateSaveCodeInput!): SaveCode

    #Delete a SaveCode
    deleteSaveCode(id: String!): Boolean

    # Create a new Ordonnance
    createOrdonnance(input: CreateOrdonnanceInput!): Ordonnance

    #Update a Ordonnance
    updateOrdonnance(id: String!, input: UpdateOrdonnanceInput!): Ordonnance

    #Delete a Ordonnance
    deleteOrdonnance(id: String!): Boolean

    # Create new AutoAnswer
    createAutoAnswer(input: CreateAutoAnswerInput!): AutoAnswer

    # Update an AutoAnswer
    updateAutoAnswer(id: String!, input: UpdateAutoAnswerInput!): AutoAnswer

    # Delete an AutoAnswer
    deleteAutoAnswer(id: String!): Boolean
}